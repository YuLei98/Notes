有一只跳蚤的家在数轴上的位置 x 处。请你帮助它从位置 0 出发，到达它的家。

跳蚤跳跃的规则如下：

它可以 往前 跳恰好 a 个位置（即往右跳）。
它可以 往后 跳恰好 b 个位置（即往左跳）。
它不能 连续 往后跳 2 次。
它不能跳到任何 forbidden 数组中的位置。
跳蚤可以往前跳 超过 它的家的位置，但是它 不能跳到负整数 的位置。

给你一个整数数组 forbidden ，其中 forbidden[i] 是跳蚤不能跳到的位置，同时给你整数 a， b 和 x ，请你返回跳蚤到家的最少跳跃次数。如果没有恰好到达 x 的可行方案，请你返回 -1 。

 

示例 1：

输入：forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9
输出：3
解释：往前跳 3 次（0 -> 3 -> 6 -> 9），跳蚤就到家了。
示例 2：

输入：forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11
输出：-1
示例 3：

输入：forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7
输出：2
解释：往前跳一次（0 -> 16），然后往回跳一次（16 -> 7），跳蚤就到家了。
 

提示：

1 <= forbidden.length <= 1000
1 <= a, b, forbidden[i] <= 2000
0 <= x <= 2000
forbidden 中所有位置互不相同。
位置 x 不在 forbidden 中。

'''cpp
class Solution {
public:
    int minimumJumps(vector<int>& forbidden, int a, int b, int x) {
        if(!x) return 0;
        vector<int> vi(6001, false);
        //vector<bool> can(6001, true);      
        //for(auto f:forbidden) can[f] = false;       //也可不单独用数组标记哪些不能走，直接置访问标记为true，注释的为单独开数组的写法
        for(auto f:forbidden) vi[f] = true;
        
        queue<pair<int,bool>> que;
        vi[0] = true;       
        //if(!can[a]) return -1;
        if(vi[a]) return -1;
        que.push({a, false});
        vi[a] = true;

        int step = 0;
        int size;
        while(!que.empty()){
            size = que.size(); ++step;
            while(size--){
                auto t = que.front(); que.pop();
                if(t.first == x) return step;
                int m = t.first + a;
                //if(m <= 6000 && can[m] && !vi[m]) {
                if(m <= 6000 && !vi[m]){
                    que.push({m, false});
                    vi[m] = true;    
                }
                m = t.first - b;
                //if(m > 0 && can[m] && !vi[m] && !t.second){
                if (m > 0 && !vi[m] && !t.second){
                    que.push({m, true});
                    //vi[m] = true;                                          //这句不能写，写了就错了，思考为什么？
                }
            }
        }
        return -1;
    }
};
'''
