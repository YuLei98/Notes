363. 矩形区域不超过 K 的最大数值和
给你一个 m x n 的矩阵 matrix 和一个整数 k ，找出并返回矩阵内部矩形区域的不超过 k 的最大数值和。

题目数据保证总会存在一个数值和不超过 k 的矩形区域。

示例 1：
输入：matrix = [[1,0,1],[0,-2,3]], k = 2
输出：2
解释：蓝色边框圈出来的矩形区域 [[0, 1], [-2, 3]] 的数值和是 2，且 2 是不超过 k 的最大数字（k = 2）。

示例 2：
输入：matrix = [[2,2,-1]], k = 3
输出：3
 

提示：
m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-100 <= matrix[i][j] <= 100
-105 <= k <= 105
 

进阶：如果行数远大于列数，该如何设计解决方案？

'''cpp
class Solution {
public:
    int maxSumSubmatrix(vector<vector<int>>& matrix, int kk) {
        const int m = matrix.size(), n = matrix[0].size();
        vector<vector<int>> prefix(m + 1, vector<int>(n + 1));
        for (int i = 1; i <= m; ++i){
            for (int j = 1;j <= n; ++j){
                prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + matrix[i - 1][j - 1];
            }
        }

        //复杂度(O(m2n2))过不了
        /*int res = INT_MIN;
        for (int i = 1; i <= m; ++i){
            for (int j = 1; j <= n; ++j){
                for (int k = 0; k < i; ++k){
                    for (int l = 0; l < j; ++l){
                        int t = prefix[i][j] - prefix[i][l] - prefix[k][j] + prefix[k][l];
                        if (t <= kk){
                            res = max(t, res);
                        }
                    }
                    
                }
            }
        }*/
        
        //复杂度O(m2nlog(n))
        //思路，固定三条边
        int res = INT_MIN;
        for (int top = 1; top <= m; ++top){
            for (int bot = top; bot <= m; ++bot){
                set<int> st;
                st.insert(0);            
                for (int r = 1; r <= n; ++r){                                   //把二维抽象成一维前缀和
                    int sum = prefix[bot][r] - prefix[top - 1][r];
                    auto l = st.lower_bound(sum - kk);
                    if (l != st.end())
                        res = max(res, sum - *l);
                    st.insert(sum);
                }
            }
        }
        return res;
    }
};
'''
