给你一个整数数组 nums 和两个整数 minK 以及 maxK 。

nums 的定界子数组是满足下述条件的一个子数组：

子数组中的 最小值 等于 minK 。
子数组中的 最大值 等于 maxK 。
返回定界子数组的数目。

子数组是数组中的一个连续部分。

示例 1：
输入：nums = [1,3,5,2,7,5], minK = 1, maxK = 5
输出：2
解释：定界子数组是 [1,3,5] 和 [1,3,5,2] 。

示例 2：
输入：nums = [1,1,1,1], minK = 1, maxK = 1
输出：10
解释：nums 的每个子数组都是一个定界子数组。共有 10 个子数组。

提示：
2 <= nums.length <= 105
1 <= nums[i], minK, maxK <= 106



# https://leetcode.cn/problems/count-subarrays-with-fixed-bounds/solution/fen-xi-ding-jie-zi-shu-zu-de-xing-zhi-yi-qusi/

class Solution {
public:
    long long countSubarrays(vector<int>& nums, int minK, int maxK) {
        const int n = nums.size();
        long long ans = 0;
        int l = -1, r = -1;
        int s = -1;
        for (int i = 0; i < n; i++) {
            if (nums[i] < minK || nums[i] > maxK) {
                s = i;
                l = r = -1;
            }
            if (nums[i] == minK) l = i;
            if (nums[i] == maxK) r = i;
            
            if (l != -1 && r != -1) {
                ans += min(l, r) - s;
            }
        }
        return ans;
    }
};

class Solution {
public:
    ll calc(vector<int> nums, int minK, int maxK) {
        ll cnt = 0;
        nums.PB(maxK + 1);
        ll ans = 0;
        REP(i, 0, sz(nums)) {
            if(nums[i] < minK or nums[i] > maxK) {
                ans += cnt * (cnt + 1) / 2;
                cnt = 0;
            } else {
                cnt++;
            }
        }
        // cout << minK << " " << maxK << " " << ans << endl;
        return ans;
    }
    
    long long countSubarrays(vector<int> &nums, int mi, int mx) {
        return calc(nums, mi, mx) - calc(nums, mi + 1, mx) - calc(nums, mi, mx - 1) + calc(nums, mi + 1, mx - 1);
    }
};