给你一个整数数组 nums 。每一次操作中，你可以将 nums 中 任意 一个元素替换成 任意 整数。

如果 nums 满足以下条件，那么它是 连续的 ：

nums 中所有元素都是 互不相同 的。
nums 中 最大 元素与 最小 元素的差等于 nums.length - 1 。
比方说，nums = [4, 2, 5, 3] 是 连续的 ，但是 nums = [1, 2, 3, 5, 6] 不是连续的 。

请你返回使 nums 连续 的 最少 操作次数。

示例 1：
输入：nums = [4,2,5,3]
输出：0
解释：nums 已经是连续的了。

示例 2：
输入：nums = [1,2,3,5,6]
输出：1
解释：一个可能的解是将最后一个元素变为 4 。
结果数组为 [1,2,3,5,4] ，是连续数组。

示例 3：
输入：nums = [1,10,100,1000]
输出：3
解释：一个可能的解是：
- 将第二个元素变为 2 。
- 将第三个元素变为 3 。
- 将第四个元素变为 4 。
结果数组为 [1,2,3,4] ，是连续数组。

提示：
1 <= nums.length <= 105
1 <= nums[i] <= 109

思路：可以用二分或双指针解法
//二分
/*
class Solution {
public:
    int minOperations(vector<int>& nums) {
        const int n = nums.size();
        sort(nums.begin(), nums.end());
        nums.erase(unique(nums.begin(), nums.end()), nums.end());
        int ans = n;
        for (int i = 0; i < nums.size(); ++ i){
            // int idx = upper_bound(nums.begin() + i, nums.end(), nums[i] + n - 1) - nums.begin();      
            // ans = min(ans, n - idx + i);

            int l = i, r = nums.size() - 1;                 //找到以i为左端点的在范围内的数的个数，
            while (l < r){
                int m = (l + r + 1) / 2;
                if (nums[m] <= nums[i] + n - 1) l = m;
                else r = m - 1;
            }
            ans = min(ans, n - l + i - 1);
        }
        return ans;
    }
};
*/


//双指针
/*
class Solution {
public:
    int minOperations(vector<int>& nums) {
        int m = nums.size();
        sort(nums.begin(),nums.end());
        nums.erase(unique(nums.begin(),nums.end()),nums.end());
        int n = nums.size();
        int res = 0;
        for(int i = 0,j = 0;i < n && j < n;i ++){
            while(j < n && nums[j] - nums[i] <= m - 1) j ++;
            res = max(res,j - i + 1);
        }
        return m - res + 1;
    }
};
*/