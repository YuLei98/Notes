给你一个下标从 0 开始的二维整数数组 events ，其中 events[i] = [startTimei, endTimei, valuei] 。第 i 个活动开始于 startTimei ，结束于 endTimei ，如果你参加这个活动，那么你可以得到价值 valuei 。
你 最多 可以参加 两个时间不重叠 活动，使得它们的价值之和 最大 。

请你返回价值之和的 最大值 。

注意，活动的开始时间和结束时间是 包括 在活动时间内的，也就是说，你不能参加两个活动且它们之一的开始时间等于另一个活动的结束时间。更具体的，如果你参加一个活动，且结束时间为 t ，那么下一个活动必须在 t + 1 或之后的时间开始。

 

示例 1:
输入：events = [[1,3,2],[4,5,2],[2,4,3]]
输出：4
解释：选择绿色的活动 0 和 1 ，价值之和为 2 + 2 = 4 。

示例 2：
输入：events = [[1,3,2],[4,5,2],[1,5,5]]
输出：5
解释：选择活动 2 ，价值和为 5 。

示例 3：
输入：events = [[1,5,3],[1,5,1],[6,6,5]]
输出：8
解释：选择活动 0 和 2 ，价值之和为 3 + 5 = 8 。
 

提示：
2 <= events.length <= 105
events[i].length == 3
1 <= startTimei <= endTimei <= 109
1 <= valuei <= 106

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/two-best-non-overlapping-events

//动态规划+二分，B.M
/*
class Solution {
public:
    int maxTwoEvents(vector<vector<int>>& events) {
        const int n = events.size();
        vector<int> idx(n);
        iota(idx.begin(), idx.end(), 0);
        sort(idx.begin(), idx.end(), [&events](int i, int j){
           return events[i][1] < events[j][1] || (events[i][1] == events[j][1] && events[i][0] < events[j][0]); 
        });
        vector<vector<int>> f(n, vector<int>(2));
        f[0][0] = events[idx[0]][2];
        for (int i = 1; i < n; ++ i){
            int l = 0, r = i - 1;
            int ans = -1;
            while (l <= r){
                int m = (l + r) / 2;
                if (events[idx[m]][1] < events[idx[i]][0]){
                    ans = m;
                    l = m + 1;
                }else{
                    r = m - 1;
                }
            }
            f[i][0] = max(f[i - 1][0], events[idx[i]][2]);
            f[i][1] = max(f[i - 1][1], (ans >= 0 ? f[ans][0] : 0) + events[idx[i]][2]);
        }

        return max(f[n - 1][0], f[n - 1][1]);
    }
};
*/

//B.W 贪心+优先队列
/*
class Solution {
public:
    int maxTwoEvents(vector<vector<int>>& events) {
        sort(events.begin(), events.end());
        int ans = 0, hi = 0, n = events.size();
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
        for (int i = 0; i < n; ++i) {
            int s = events[i][0], e = events[i][1], v = events[i][2];
            while (!pq.empty() && pq.top().first < s) {
                hi = max(hi, pq.top().second);
                pq.pop();
            }
            ans = max(ans, hi + v);
            pq.emplace(e, v);
        }
        return ans;
    }
};
*/