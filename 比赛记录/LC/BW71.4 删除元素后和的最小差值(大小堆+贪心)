给你一个下标从 0 开始的整数数组 nums ，它包含 3 * n 个元素。

你可以从 nums 中删除 恰好 n 个元素，剩下的 2 * n 个元素将会被分成两个 相同大小 的部分。

前面 n 个元素属于第一部分，它们的和记为 sumfirst 。
后面 n 个元素属于第二部分，它们的和记为 sumsecond 。
两部分和的 差值 记为 sumfirst - sumsecond 。

比方说，sumfirst = 3 且 sumsecond = 2 ，它们的差值为 1 。
再比方，sumfirst = 2 且 sumsecond = 3 ，它们的差值为 -1 。
请你返回删除 n 个元素之后，剩下两部分和的 差值的最小值 是多少。

示例 1：
输入：nums = [3,1,2]
输出：-1
解释：nums 有 3 个元素，所以 n = 1 。
所以我们需要从 nums 中删除 1 个元素，并将剩下的元素分成两部分。
- 如果我们删除 nums[0] = 3 ，数组变为 [1,2] 。两部分和的差值为 1 - 2 = -1 。
- 如果我们删除 nums[1] = 1 ，数组变为 [3,2] 。两部分和的差值为 3 - 2 = 1 。
- 如果我们删除 nums[2] = 2 ，数组变为 [3,1] 。两部分和的差值为 3 - 1 = 2 。
两部分和的最小差值为 min(-1,1,2) = -1 。

示例 2：
输入：nums = [7,9,5,8,1,3]
输出：1
解释：n = 2 。所以我们需要删除 2 个元素，并将剩下元素分为 2 部分。
如果我们删除元素 nums[2] = 5 和 nums[3] = 8 ，剩下元素为 [7,9,1,3] 。和的差值为 (7+9) - (1+3) = 12 。
为了得到最小差值，我们应该删除 nums[1] = 9 和 nums[4] = 1 ，剩下的元素为 [7,5,8,3] 。和的差值为 (7+5) - (8+3) = 1 。
观察可知，最优答案为 1 。
 
提示：
nums.length == 3 * n
1 <= n <= 105
1 <= nums[i] <= 105


// 思路：动态维护左边n个未删除的数字组成的大根堆，右边n个未删除的数字组成的小根堆。遍历中间 n 个数，替换掉左边或右边的 n 个数。

class Solution {
public:
    using ll = long long;
    long long minimumDifference(vector<int>& nums) {
        const int n = nums.size() / 3;
        // 可以不用特判
        //if (n == 1) return min({nums[0] - nums[1], nums[0] - nums[2], nums[1] - nums[2]});
        ll left = 0, right = 0;
        priority_queue<int> l;
        priority_queue<int, vector<int>, greater<>> r;
        for (int i = 0; i < n; ++ i) {
            left += nums[i];
            l.push(nums[i]);
            right += nums[2 * n + i];
            r.push(nums[2 * n + i]);
        }
        
        int lo = n, hi = 2 * n - 1;
        vector<ll> a(n + 1), b(n + 1);
        a[0] = left;
        for (int i = lo; i <= hi; ++ i) {
            a[i - n + 1] = a[i - n] + nums[i] - l.top();
            l.pop();
            l.push(nums[i]);
        }
        
        b[n] = right;
        for (int i = hi; i >= lo; -- i) {
            b[i - n] = b[i - n + 1] + nums[i] - r.top();
            r.pop();
            r.push(nums[i]);
        }
        ll ans = left - right;
        for (int i = 0; i <= n; ++ i) {
            ans = min(ans, a[i] - b[i]);
        }
        // printf("%d %d\n", left, right);
        return ans;
    }
};