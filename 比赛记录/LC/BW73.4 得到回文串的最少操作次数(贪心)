给你一个只包含小写英文字母的字符串 s 。

每一次 操作 ，你可以选择 s 中两个 相邻 的字符，并将它们交换。

请你返回将 s 变成回文串的 最少操作次数 。

注意 ，输入数据会确保 s 一定能变成一个回文串。

 

示例 1：

输入：s = "aabb"
输出：2
解释：
我们可以将 s 变成 2 个回文串，"abba" 和 "baab" 。
- 我们可以通过 2 次操作得到 "abba" ："aabb" -> "abab" -> "abba" 。
- 我们可以通过 2 次操作得到 "baab" ："aabb" -> "abab" -> "baab" 。
因此，得到回文串的最少总操作次数为 2 。
示例 2：

输入：s = "letelt"
输出：2
解释：
通过 2 次操作从 s 能得到回文串 "lettel" 。
其中一种方法是："letelt" -> "letetl" -> "lettel" 。
其他回文串比方说 "tleelt" 也可以通过 2 次操作得到。
可以证明少于 2 次操作，无法得到回文串。
 

提示：

1 <= s.length <= 2000
s 只包含小写英文字母。
s 可以通过有限次操作得到一个回文串。

/*
从左到右依次处理。对于每个字母，从右向左找第一个与他匹配的字母：

如果找到，且不是它本身，则将找到的这个字母移动到右侧的对称位置；
如果找到，但是当前字母本身，这说明当前字母需要最后放在字符串的正中间。注意这里不能一步到位，而只能先将其向右移动一步，以避免进行多余操作。操作完成后，我们需要继续处理当前位置（所以在下面的实现中，有 i-- 这一步）。
复杂度：

时间复杂度O(N2)。
空间复杂度O(N)。

作者：吴自华
链接：https://leetcode-cn.com/circle/discuss/9WhoB7/view/s15EHo/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
*/

/*
class Solution {
public:
    int minMovesToMakePalindrome(string s) {
        int n = s.length();
        int ans = 0;
        for (int i = 0; i < n / 2; ++ i) {
            int right = n - i - 1;
            while (s[right] != s[i]) right --;
            if (i == right) {
                swap(s[i], s[i + 1]);
                ++ ans;
                -- i;
            } else {
                for (int j = right; j < n - i - 1; ++ j)
                    swap(s[j], s[j + 1]);
                ans += n - i - 1 - right;
            }
        }
        return ans;
    }
};
*/