给你一个下标从 0 开始大小为 m x n 的二维整数数组 grid ，它表示一个网格图。每个格子为下面 3 个值之一：

0 表示草地。
1 表示着火的格子。
2 表示一座墙，你跟火都不能通过这个格子。
一开始你在最左上角的格子 (0, 0) ，你想要到达最右下角的安全屋格子 (m - 1, n - 1) 。每一分钟，你可以移动到 相邻 的草地格子。每次你移动 之后 ，着火的格子会扩散到所有不是墙的 相邻 格子。

请你返回你在初始位置可以停留的 最多 分钟数，且停留完这段时间后你还能安全到达安全屋。如果无法实现，请你返回 -1 。如果不管你在初始位置停留多久，你 总是 能到达安全屋，请你返回 109 。

注意，如果你到达安全屋后，火马上到了安全屋，这视为你能够安全到达安全屋。

如果两个格子有共同边，那么它们为 相邻 格子。

示例 1：
输入：grid = [[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]]
输出：3
解释：上图展示了你在初始位置停留 3 分钟后的情形。
你仍然可以安全到达安全屋。
停留超过 3 分钟会让你无法安全到达安全屋。

示例 2：
输入：grid = [[0,0,0,0],[0,1,2,0],[0,2,0,0]]
输出：-1
解释：上图展示了你马上开始朝安全屋移动的情形。
火会蔓延到你可以移动的所有格子，所以无法安全到达安全屋。
所以返回 -1 。

示例 3：
输入：grid = [[0,0,0],[2,2,0],[1,2,0]]
输出：1000000000
解释：上图展示了初始网格图。
注意，由于火被墙围了起来，所以无论如何你都能安全到达安全屋。
所以返回 109 。
 

提示：
m == grid.length
n == grid[i].length
2 <= m, n <= 300
4 <= m * n <= 2 * 104
grid[i][j] 是 0 ，1 或者 2 。
grid[0][0] == grid[m - 1][n - 1] == 0

/*
class Solution {
    const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, -1, 0, 1};
public:
    int maximumMinutes(vector<vector<int>>& grid) {
        const int m = grid.size(), n = grid[0].size();
        auto canEscape = [&] (int minutes) {
            vector<vector<bool>> vp(m, vector<bool>(n)), vf(vp);
            queue<pair<int, int>> p, f;   
            auto fireGo = [&] () -> void {
                if (f.empty()) return;
                int sz = f.size();
                while (sz --) {
                    auto t = f.front(); f.pop();
                    int x = t.first, y = t.second;
                    for (int i = 0; i < 4; ++ i) {
                        int nx = x + dx[i], ny = y + dy[i];
                        if (nx >= 0 and nx < m and ny >= 0 and ny < n and grid[nx][ny] == 0 and !vf[nx][ny]) {
                            f.emplace(nx, ny);
                            vf[nx][ny] = true;
                        }
                    }
                }
            };
            for (int i = 0; i < m; ++ i) {
                for (int j = 0; j < n; ++ j) {
                    if (grid[i][j] == 1) {
                        f.emplace(i, j);
                        vf[i][j] = true;
                    }
                }
            }
            p.emplace(0, 0);
            vp[0][0] = true;
            while (minutes > 0 and !f.empty()) {
                minutes --;
                fireGo();
            }
            if (grid[m - 1][n - 1] != 0 and vf[m - 1][n - 1]) return false;
            bool recent = false;
            while (!p.empty()) {
                fireGo();
                if (!recent and vf[m - 1][n - 1]) recent = true;
                if (recent) vf[m - 1][n - 1] = false;                   // 是否火刚烧到安全屋

                int sz = p.size();
                while (sz --) {
                    auto t = p.front(); p.pop();
                    int x = t.first, y = t.second;
                    for (int i = 0; i < 4; ++ i) {
                        int nx = x + dx[i], ny = y + dy[i];
                        // 注意：如果到达安全屋后，火马上到达了安全屋，视为可以安全到达
                        if (nx >= 0 and nx < m and ny >= 0 and ny < n and grid[nx][ny] == 0 and !vf[nx][ny] and !vp[nx][ny]) {
                            if (nx == m - 1 and ny == n - 1) return true;
                            p.emplace(nx, ny);
                            vp[nx][ny] = true;
                        }
                    }
                }
                if (recent) return false;
            }
            return false;
        };
        int ans = -1;
        int left = 0, right = 1e9;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canEscape(mid)) {
                ans = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return ans;
    }
};
*/