字符串的 波动 定义为子字符串中出现次数 最多 的字符次数与出现次数 最少 的字符次数之差。

给你一个字符串 s ，它只包含小写英文字母。请你返回 s 里所有 子字符串的 最大波动 值。

子字符串 是一个字符串的一段连续字符序列。

示例 1：
输入：s = "aababbb"
输出：3
解释：
所有可能的波动值和它们对应的子字符串如以下所示：
- 波动值为 0 的子字符串："a" ，"aa" ，"ab" ，"abab" ，"aababb" ，"ba" ，"b" ，"bb" 和 "bbb" 。
- 波动值为 1 的子字符串："aab" ，"aba" ，"abb" ，"aabab" ，"ababb" ，"aababbb" 和 "bab" 。
- 波动值为 2 的子字符串："aaba" ，"ababbb" ，"abbb" 和 "babb" 。
- 波动值为 3 的子字符串 "babbb" 。
所以，最大可能波动值为 3 。

示例 2：
输入：s = "abcde"
输出：0
解释：
s 中没有字母出现超过 1 次，所以 s 中每个子字符串的波动值都是 0 。

提示：
1 <= s.length <= 104
s  只包含小写英文字母。


// 思路：https://leetcode.cn/problems/substring-with-largest-variance/solution/mei-ju-chu-xian-zui-duo-he-zui-shao-de-z-g9gz/
/*
class Solution {
public:
    int largestVariance(string s) {
        const int n = s.length();
        int ans = 0;
        
        vector<vector<int>> f(n + 1, vector<int>(2));
        for (int i = 0; i < 26; ++ i) {
            for (int j = 0; j < 26; ++ j) {
                if (i == j) continue;
                bool a = false, b = false;
                for (auto c : s) {
                    if (c == 'a' + i) a = true;
                    else if (c == 'a' + j) b = true;
                }
                if (!a || !b) continue;
                
                // 问题抽象成求最大连续子数组的和，数组中'a'+i等于1，'a'+j等于-1，其余字符等于0
                // 连续子数组需满足至少包含一个-1.
                f[0][0] = 0;
                f[0][1] = -11111;
                for (int k = 1; k <= n; k ++) {
                    int v = (s[k - 1] == 'a' + i ? 1 : (s[k - 1] == 'a' + j ? -1 : 0));
                    f[k][0] = max(f[k - 1][0] + v, v);
                    if (s[k - 1] == 'a' + j)
                        // f[k][1] = max({f[k - 1][1] + v, f[k - 1][0] + v, v});
                        f[k][1] = max(f[k - 1][0] + v, v);
                    else
                        f[k][1] = f[k - 1][1] + v;
                    ans = max(ans, f[k][1]);
                }
            }
        }
        return ans;
    }
};
*/