「力扣挑战赛」中 N*M 大小的自行车炫技赛场的场地由一片连绵起伏的上下坡组成，场地的高度值记录于二维数组 terrain 中，场地的减速值记录于二维数组 obstacle 中。

若选手骑着自行车从高度为 h1 且减速值为 o1 的位置到高度为 h2 且减速值为 o2 的相邻位置，速度变化值为 h1-h2-o2（负值减速，正值增速）。
选手初始位于坐标 position 处且初始速度为 1，请问选手可以刚好到其他哪些位置时速度依旧为 1。请以二维数组形式返回这些位置。若有多个位置则按行坐标升序排列，若有多个位置行坐标相同则按列坐标升序排列。

注意： 骑行过程中速度不能为零或负值

示例 1：

输入：position = [0,0], terrain = [[0,0],[0,0]], obstacle = [[0,0],[0,0]]

输出：[[0,1],[1,0],[1,1]]

解释：
由于当前场地属于平地，根据上面的规则，选手从[0,0]的位置出发都能刚好在其他处的位置速度为 1。

示例 2：

输入：position = [1,1], terrain = [[5,0],[0,6]], obstacle = [[0,6],[7,0]]

输出：[[0,1]]

解释：
选手从 [1,1] 处的位置出发，到 [0,1] 处的位置时恰好速度为 1。

提示：

n == terrain.length == obstacle.length
m == terrain[i].length == obstacle[i].length
1 <= n <= 100
1 <= m <= 100
0 <= terrain[i][j], obstacle[i][j] <= 100
position.length == 2
0 <= position[0] < n
0 <= position[1] < m

//思路：BFS，DFS都行，只要注意同一个点可以重复经过，只要保证每次经过时速度不同

//BFS
/*
class Solution {
    VVI ans;
    const int dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0};
public:
    vector<vector<int>> bicycleYard(vector<int>& p, vector<vector<int>>& tr, vector<vector<int>>& obs) {
        queue<tuple<int, int, int>> q;
        q.push({p[0], p[1], 1});
        const int m = SZ(tr), n = SZ(tr[0]);
        auto ck = [=](int x, int y) -> bool{
            return x >= 0 && x < m && y >= 0 && y < n;
        };
        vector<VVI> v(m, VVI(n, VI(102)));
        v[p[0]][p[1]][1] = 1;
        while (!q.empty()){
            auto [_x, _y, _d] = q.front();
            q.pop();
            // cout << _x << " " << _y << " " << _d << endl;
            FOR (i, 0, 4){
                int x = _x + dx[i], y = _y + dy[i];
                if (!ck(x, y)) continue;
                int d = _d + tr[_x][_y] - tr[x][y] - obs[x][y];
                if (d > 0 && !v[x][y][d]){
                    v[x][y][d] = 1;
                    q.push({x, y, d});
                    if (d == 1) ans.PB(VI{x, y});
                }
            }
        }
        sort(ALL(ans));
        return ans;
    }
};
*/



//DFS
/*
class Solution {
    set<pii> ans;
    const int dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0};
    int m, n;
public:
    inline int ck(int x, int y){
        return x >= 0 && x < m && y >= 0 && y < n;
    };
    void dfs(VVI& tr, VVI& obs, int x, int y, int d, vector<VVI>& v){
        FOR (i, 0, 4){
            int xx = x + dx[i], yy = y + dy[i];
            if (!ck(xx, yy)) continue;
            int dd = d + tr[x][y] - tr[xx][yy] - obs[xx][yy];
            if (dd > 0 && !v[xx][yy][dd]){
                v[xx][yy][dd] = 1;
                if (dd == 1) 
                    ans.insert({xx, yy});
                dfs(tr, obs, xx, yy, dd, v);
                
                // v[xx][yy][dd] = 0;       //加了超时
            }
        }
    }
    vector<vector<int>> bicycleYard(vector<int>& p, vector<vector<int>>& tr, vector<vector<int>>& obs) {

        m = SZ(tr), n = SZ(tr[0]);
        
        vector<VVI> v(m, VVI(n, VI(102)));
        v[p[0]][p[1]][1] = 1;
        
        dfs(tr, obs, p[0], p[1], 1, v);
        VVI res;
        for (auto& pi: ans){
            res.PB({pi.fi, pi.se});
        }
        sort(ALL(res));
        return res;
    }
};

*/