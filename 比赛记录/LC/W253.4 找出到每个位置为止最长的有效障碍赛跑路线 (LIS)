你打算构建一些障碍赛跑路线。给你一个 下标从 0 开始 的整数数组 obstacles ，数组长度为 n ，其中 obstacles[i] 表示第 i 个障碍的高度。

对于每个介于 0 和 n - 1 之间（包含 0 和 n - 1）的下标  i ，在满足下述条件的前提下，请你找出 obstacles 能构成的最长障碍路线的长度：

你可以选择下标介于 0 到 i 之间（包含 0 和 i）的任意个障碍。
在这条路线中，必须包含第 i 个障碍。
你必须按障碍在 obstacles 中的 出现顺序 布置这些障碍。
除第一个障碍外，路线中每个障碍的高度都必须和前一个障碍 相同 或者 更高 。
返回长度为 n 的答案数组 ans ，其中 ans[i] 是上面所述的下标 i 对应的最长障碍赛跑路线的长度。

 

示例 1：

输入：obstacles = [1,2,3,2]
输出：[1,2,3,3]
解释：每个位置的最长有效障碍路线是：
- i = 0: [1], [1] 长度为 1
- i = 1: [1,2], [1,2] 长度为 2
- i = 2: [1,2,3], [1,2,3] 长度为 3
- i = 3: [1,2,3,2], [1,2,2] 长度为 3
示例 2：

输入：obstacles = [2,2,1]
输出：[1,2,1]
解释：每个位置的最长有效障碍路线是：
- i = 0: [2], [2] 长度为 1
- i = 1: [2,2], [2,2] 长度为 2
- i = 2: [2,2,1], [1] 长度为 1
示例 3：

输入：obstacles = [3,1,5,6,4,2]
输出：[1,1,2,3,2,2]
解释：每个位置的最长有效障碍路线是：
- i = 0: [3], [3] 长度为 1
- i = 1: [3,1], [1] 长度为 1
- i = 2: [3,1,5], [3,5] 长度为 2, [1,5] 也是有效的障碍赛跑路线
- i = 3: [3,1,5,6], [3,5,6] 长度为 3, [1,5,6] 也是有效的障碍赛跑路线
- i = 4: [3,1,5,6,4], [3,4] 长度为 2, [1,4] 也是有效的障碍赛跑路线
- i = 5: [3,1,5,6,4,2], [1,2] 长度为 2
 

提示：

n == obstacles.length
1 <= n <= 105
1 <= obstacles[i] <= 107


思路：本质上是求解以obs[i]为结尾的不递增子序列。

注意：LIS不能用单调栈，反例:[1,5,5,1,3,4,5,1,4], 如果用单调栈，当遍历到最后一位时，栈里的元素为[1，1，1，4]，而LIS为[1，1，1，4，4]。

代码：
using namespace luoyu;
class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obs) {
        // stack<int> s;                                                //不能用单调栈
        // const int n = SZ(obs);
        // VI res(n);
        // FOR (i, 0, n){
        //     while (!s.empty() && s.top() > obs[i]) s.pop();
        //     s.push(obs[i]);
        //     res[i] = SZ(s);
        // }
        // return res;
        
        

        //时间复杂度O（n2）
        const int n = SZ(obs);
        VI res(n);
        VI s(n);
        int lst = 0;
        FOR (i, 0, n){
            int ins = lst;
            while (ins - 1 >= 0 && s[ins - 1] > obs[i]) ins --;        //这里寻找插入位置时可以使用二分，最终时间复杂度O（nlog(n)）
            s[ins] = obs[i];
            if (lst == ins) lst ++;
            res[i] = ins + 1;
        }
        return res;
    }
};

//时间复杂度O（nlogn）
class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        const int n = obstacles.size();
        vector<int> LIS;
        vector<int> res(n);
        
        for (int i = 0; i < n; ++i){
            auto ins = upper_bound(LIS.begin(), LIS.end(), obstacles[i]);
            if (ins == LIS.end()) {
                LIS.push_back(obstacles[i]);
                res[i] = LIS.size();        //
            }else{
                *ins = obstacles[i];
                res[i] = ins - LIS.begin() + 1;     //
            }
            // int x = ins - LIS.begin();
            // res[i] = x + 1;
            // for (auto x: LIS) cout << x << " "; cout << endl;
        }
        return res;
    }
};