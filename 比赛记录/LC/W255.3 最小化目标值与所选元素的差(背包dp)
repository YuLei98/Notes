给你一个大小为 m x n 的整数矩阵 mat 和一个整数 target 。
从矩阵的 每一行 中选择一个整数，你的目标是 最小化 所有选中元素之 和 与目标值 target 的 绝对差 。
返回 最小的绝对差 。
a 和 b 两数字的 绝对差 是 a - b 的绝对值。

示例 1：
输入：mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13
输出：0
解释：一种可能的最优选择方案是：
- 第一行选出 1
- 第二行选出 5
- 第三行选出 7
所选元素的和是 13 ，等于目标值，所以绝对差是 0 。


示例 2：
输入：mat = [[1],[2],[3]], target = 100
输出：94
解释：唯一一种选择方案是：
- 第一行选出 1
- 第二行选出 2
- 第三行选出 3
所选元素的和是 6 ，绝对差是 94 。

示例 3：
输入：mat = [[1,2,9,8,7]], target = 6
输出：1
解释：最优的选择方案是选出第一行的 7 。
绝对差是 1 。
 

提示：
m == mat.length
n == mat[i].length
1 <= m, n <= 70
1 <= mat[i][j] <= 70
1 <= target <= 800


//每行都要取一个元素，可以转化成背包问题，取与不取，记录当前状态值。
int minimizeTheDifference(vector<vector<int>>& mat, int target) {
    const int m = mat.size(), n = mat[0].size();
    vector<bool> can(5000); can[0] = true;
    
    for (int i = 0; i < m; ++i){
        vector<bool> nowcan(5000);
        for (int k = 0; k <= 5000; k ++){
        // for (int k = i; k < 70 * i; ++ k){         //这里能优化，因为mat[i][j]大于等于1，小于等于70
            if (can[k]){
                for (int j = 0; j < n; ++ j){
                    nowcan[k + mat[i][j]] = true;
                }
            }
        }
        can = std::move(nowcan);
    }
    int res = INT_MAX;
    for (int i = 0; i <= 5000; ++ i){
        if (can[i])
            res = min(res, abs(i - target));
    }
    return res;
}


//bitset优化版
int minimizeTheDifference(vector<vector<int>>& mat, int target) {
    const int m = mat.size(), n = mat[0].size();
    bitset<M> b;
    b.set(0);
    
    for (int i = 0; i < m; ++ i){
        bitset<M> c;
        for (int j = 0; j < n; ++ j){
            c |= b << mat[i][j];
        }
        b = std::move(c);
    }
    int res = M;
    for (int i = 0; i <= 5000; i ++){
        if (b[i])
            res = min(abs(i - target), res);
    }
    return res;
}


//二维dp
class Solution {
    bool f[75][5005];
public:
    int minimizeTheDifference(vector<vector<int>>& mat, int target) {
        int n = mat.size(), m = mat[0].size(), i, j, k, ans = 1 << 30;
        memset(f,0,sizeof(f));
        f[0][0]=1;
        for(i=0;i<n;i++)
            for(j=0;j<5005;j++)
                if(f[i][j])
                    for(k=0;k<m;k++)
                        f[i+1][j+mat[i][k]]=1;
        for(i=0;i<5005;i++)
            if(f[n][i])
                ans = min(ans, max(i - target, target - i));
        return ans;
    }
};