给你一个长度为 2 * n 的整数数组。你需要将 nums 分成 两个 长度为 n 的数组，分别求出两个数组的和，并 最小化 两个数组和之 差的绝对值 。nums 中每个元素都需要放入两个数组之一。

请你返回 最小 的数组和之差。

示例 1：
输入：nums = [3,9,7,3]
输出：2
解释：最优分组方案是分成 [3,9] 和 [7,3] 。
数组和之差的绝对值为 abs((3 + 9) - (7 + 3)) = 2 。

示例 2：
输入：nums = [-36,36]
输出：72
解释：最优分组方案是分成 [-36] 和 [36] 。
数组和之差的绝对值为 abs((-36) - (36)) = 72 。

示例 3：
输入：nums = [2,-1,0,4,-2,-9]
输出：0
解释：最优分组方案是分成 [2,4,-9] 和 [-1,0,-2] 。
数组和之差的绝对值为 abs((2 + 4 + -9) - (-1 + 0 + -2)) = 0 。

提示：
1 <= n <= 15
nums.length == 2 * n
-107 <= nums[i] <= 107


/*
思路：要让两个数组和的差最小，就是要让其中一个数组的和尽可能接近sum/2。Middle in the middle算法
/*
class Solution {
public:
    int minimumDifference(vector<int>& nums) {
        const int n = nums.size() / 2;
        for (auto &x: nums) x *= 2;
        int total = accumulate(nums.begin(), nums.end(), 0);
        vector<set<int>> sumleft(n + 1), sumright(n + 1);
        sumleft[0].insert(0), sumright[0].insert(0);
        for (int i = 0; i < n; ++ i){
            // for (int j = 0; j <= i; ++ j){      //错误
            for (int j = i; j >= 0; -- j){
                for (auto x: sumleft[j])
                    sumleft[j + 1].insert(x + nums[i]);
                for (auto x: sumright[j])
                    sumright[j + 1].insert(x + nums[n + i]);
            }
        }
        vector<vector<int>> suml(n + 1), sumr(n + 1);
        for (int i = 0; i <= n; ++ i){
            suml[i] = vector<int>(sumleft[i].begin(), sumleft[i].end());
            sumr[i] = vector<int>(sumright[i].begin(), sumright[i].end());
        }
        int ans = INT_MAX;
        int target = total / 2;
        for (int i = 0; i <= n; ++ i){
            int nl = suml[i].size(), nr = sumr[n - i].size();
            int k = 0, j = nr - 1;
            while (k < nl && j >= 0){
                int cur = suml[i][k] + sumr[n - i][j];
                ans = min(ans, abs(cur - target));
                if (cur < target) k ++;
                else
                    j --;
            }
        }
        
        return ans;
    }
};
*/