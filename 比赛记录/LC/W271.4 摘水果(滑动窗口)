在一个无限的 x 坐标轴上，有许多水果分布在其中某些位置。给你一个二维整数数组 fruits ，其中 fruits[i] = [positioni, amounti] 表示共有 amounti 个水果放置在 positioni 上。fruits 已经按 positioni 升序排列 ，每个 positioni 互不相同 。

另给你两个整数 startPos 和 k 。最初，你位于 startPos 。从任何位置，你可以选择 向左或者向右 走。在 x 轴上每移动 一个单位 ，就记作 一步 。你总共可以走 最多 k 步。你每达到一个位置，都会摘掉全部的水果，水果也将从该位置消失（不会再生）。

返回你可以摘到水果的 最大总数 。


示例 1：
输入：fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4
输出：9
解释：
最佳路线为：
- 向右移动到位置 6 ，摘到 3 个水果
- 向右移动到位置 8 ，摘到 6 个水果
移动 3 步，共摘到 3 + 6 = 9 个水果

示例 2：
输入：fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4
输出：14
解释：
可以移动最多 k = 4 步，所以无法到达位置 0 和位置 10 。
最佳路线为：
- 在初始位置 5 ，摘到 7 个水果
- 向左移动到位置 4 ，摘到 1 个水果
- 向右移动到位置 6 ，摘到 2 个水果
- 向右移动到位置 7 ，摘到 4 个水果
移动 1 + 3 = 4 步，共摘到 7 + 1 + 2 + 4 = 14 个水果

示例 3：
输入：fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2
输出：0
解释：
最多可以移动 k = 2 步，无法到达任一有水果的地方

提示：
1 <= fruits.length <= 105
fruits[i].length == 2
0 <= startPos, positioni <= 2 * 105
对于任意 i > 0 ，positioni-1 < positioni 均成立（下标从 0 开始计数）
1 <= amounti <= 104
0 <= k <= 2 * 105

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-fruits-harvested-after-at-most-k-steps
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/*
class Solution {
public:
    int maxTotalFruits(vector<vector<int>>& fruits, int startPos, int k) {
        const int n = fruits.size();
        
        vector<int> pos(n), amt(n), preSum(n + 1);
        for(int i = 0; i < n; ++ i){
            pos[i] = fruits[i][0];
            amt[i] = fruits[i][1];
            preSum[i + 1] = preSum[i] + amt[i];
        }
        
        int right = 0, left = 0;
        int i = 0;
        while (i < n and pos[i] < startPos){
            if (startPos - pos[i] <= k){
                left += amt[i];
            }
            ++i;
        }
        int lidx = i - 1;
        if (i < n and pos[i] == startPos){
            left += right = amt[i++];
        }
        while (i < n and pos[i] - startPos <= k){
            right += amt[i++];
        }
        
        if (!left and !right) return 0;
        if (startPos < pos[0]) return right;
        else if (pos.back() < startPos) return left;

        int ridx = pos[lidx + 1] == startPos ? lidx + 2 : lidx + 1;

        int leftright2 = 0;
        for (int l = 0, r = ridx; r < n and 2 * (pos[r] - startPos) <= k; ++ r){
            while (pos[r] * 2 - pos[l] - startPos > k) l ++;
            leftright2 = max(leftright2, preSum[r + 1] - preSum[l]);
        }

        int rightleft2 = 0;
        for (int l = lidx, r = n - 1; l >= 0 and 2 * (startPos - pos[l]) <= k; -- l){
            while (startPos + pos[r] - 2 * pos[l] > k) -- r;
            rightleft2 = max(rightleft2, preSum[r + 1] - preSum[l]);
        }
        //只摘开始位置左边、右边、右边再左边，左边再右边
        return max({left, right, leftright2, rightleft2});
    }
};
*/