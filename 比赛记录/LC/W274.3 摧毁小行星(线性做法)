给你一个整数 mass ，它表示一颗行星的初始质量。再给你一个整数数组 asteroids ，其中 asteroids[i] 是第 i 颗小行星的质量。

你可以按 任意顺序 重新安排小行星的顺序，然后让行星跟它们发生碰撞。如果行星碰撞时的质量 大于等于 小行星的质量，那么小行星被 摧毁 ，并且行星会 获得 这颗小行星的质量。否则，行星将被摧毁。

如果所有小行星 都 能被摧毁，请返回 true ，否则返回 false 。

 
示例 1：
输入：mass = 10, asteroids = [3,9,19,5,21]
输出：true
解释：一种安排小行星的方式为 [9,19,5,3,21] ：
- 行星与质量为 9 的小行星碰撞。新的行星质量为：10 + 9 = 19
- 行星与质量为 19 的小行星碰撞。新的行星质量为：19 + 19 = 38
- 行星与质量为 5 的小行星碰撞。新的行星质量为：38 + 5 = 43
- 行星与质量为 3 的小行星碰撞。新的行星质量为：43 + 3 = 46
- 行星与质量为 21 的小行星碰撞。新的行星质量为：46 + 21 = 67
所有小行星都被摧毁。

示例 2：
输入：mass = 5, asteroids = [4,9,23,4]
输出：false
解释：
行星无论如何没法获得足够质量去摧毁质量为 23 的小行星。
行星把别的小行星摧毁后，质量为 5 + 4 + 9 + 4 = 22 。
它比 23 小，所以无法摧毁最后一颗小行星。
 
提示：
1 <= mass <= 105
1 <= asteroids.length <= 105
1 <= asteroids[i] <= 105

思路：
如果使用基于比较的排序,那么复杂度是O(nlogn)的.
但是排序不是必须的,考虑将所有值按[1,2),[2,4),...,[2^i,2^{i+1}),⋯分组,按顺序考虑所有非空的组,如果当前mass小于组内最小值,那么答案是false;
如果当前mass大于等于组内最小值,那么加上最小值之后必然大于组内所有值,所以可以直接加上组内所有值.

作者：Heltion
链接：https://leetcode-cn.com/problems/destroying-asteroids/solution/yi-chong-xian-xing-zuo-fa-by-heltion-i6y4/



API介绍：
int __builtin_clz (unsigned int x)
返回前导的0的个数。
•int __builtin_ctz (unsigned int x)
返回后面的0个个数，和__builtin_clz相对。
•int __builtin_popcount (unsigned int x)
返回二进制表示中1的个数。
————————————————

也有long long版本，只需在函数名后面加上l或ll，如__builtin_clzll.

/*
class Solution {
public:
    bool asteroidsDestroyed(int mass, vector<int>& asteroids) {
        vector<int> min(17, -1);
        vector<long long> sum(17);
        
        for (auto x : asteroids){
            int h = 31 - __builtin_clz(x);
            if (min[h] == -1 or min[h] > x) min[h] = x;
            sum[h] += x;
        }
        // for (int i = 0 ; i < 17; ++ i)
        //     cout << bitset<17>(min[i]) << " ";
        // cout << endl;
        long long cur = mass;
        for (int i = 0; i < 17; ++ i){
            if (min[i] == -1) continue;
            // if (mass < min[i]) return false;          
            // mass += sum[i];                          //mass是int，加一个Longlong不会报错，但会溢出
            
            if (cur < min[i]) return false;
            cur += sum[i];
            
        }
        return true;
    }
};
*/