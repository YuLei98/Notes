给你一个下标从 0 开始的字符串数组 words 。每个字符串都只包含 小写英文字母 。words 中任意一个子串中，每个字母都至多只出现一次。

如果通过以下操作之一，我们可以从 s1 的字母集合得到 s2 的字母集合，那么我们称这两个字符串为 关联的 ：

往 s1 的字母集合中添加一个字母。
从 s1 的字母集合中删去一个字母。
将 s1 中的一个字母替换成另外任意一个字母（也可以替换为这个字母本身）。
数组 words 可以分为一个或者多个无交集的 组 。如果一个字符串与另一个字符串关联，那么它们应当属于同一个组。

注意，你需要确保分好组后，一个组内的任一字符串与其他组的字符串都不关联。可以证明在这个条件下，分组方案是唯一的。

请你返回一个长度为 2 的数组 ans ：

ans[0] 是 words 分组后的 总组数 。
ans[1] 是字符串数目最多的组所包含的字符串数目。
 

示例 1：
输入：words = ["a","b","ab","cde"]
输出：[2,3]
解释：
- words[0] 可以得到 words[1] （将 'a' 替换为 'b'）和 words[2] （添加 'b'）。所以 words[0] 与 words[1] 和 words[2] 关联。
- words[1] 可以得到 words[0] （将 'b' 替换为 'a'）和 words[2] （添加 'a'）。所以 words[1] 与 words[0] 和 words[2] 关联。
- words[2] 可以得到 words[0] （删去 'b'）和 words[1] （删去 'a'）。所以 words[2] 与 words[0] 和 words[1] 关联。
- words[3] 与 words 中其他字符串都不关联。
所以，words 可以分成 2 个组 ["a","b","ab"] 和 ["cde"] 。最大的组大小为 3 。

示例 2：
输入：words = ["a","ab","abc"]
输出：[1,3]
解释：
- words[0] 与 words[1] 关联。
- words[1] 与 words[0] 和 words[2] 关联。
- words[2] 与 words[1] 关联。
由于所有字符串与其他字符串都关联，所以它们全部在同一个组内。
所以最大的组大小为 3 。
 

提示：
1 <= words.length <= 2 * 104
1 <= words[i].length <= 26
words[i] 只包含小写英文字母。
words[i] 中每个字母最多只出现一次。


// 可用DFS、BFS、并查集写

// 并查集
class Solution {
    class UF{
    public:
        vector<int> f, sz;
        int num;
        UF(int n): f(n, -1), sz(n, 1), num(n) {
            iota(f.begin(), f.end(), 0);
        }
        int find(int i) {
            return i == f[i] ? i : f[i] = find(f[i]);
        }
        void merge(int i, int j) {
            int x = find(i), y = find(j);
            if (x != y) {
                if (sz[x] <= sz[y]) {
                    f[x] = y;
                    sz[y] += sz[x];
                } else {
                    f[y] = x;
                    sz[x] += sz[y];
                }
                num --;
            }
        }
    };
public:
    vector<int> groupStrings(vector<string>& words) {
        vector<int> ans(2);
        const int n = words.size();
        vector<int> ws(n);
        for (int i = 0; i < n; ++ i) {
            for (auto c: words[i]) {
                ws[i] |= 1 << (c - 'a');
            }
        }
        
        UF uf(n);
        // 存储下标
        unordered_map<int, int> mp;
        for (int i = 0; i < n; ++ i) {
            if (mp.count(ws[i])) 
                uf.merge(i, mp[ws[i]]);
            else {
                for (int j = 0; j < 26; ++ j) {
                    // 添加、 删除一个字母
                    int msk = ws[i] ^ (1 << j);             
                    if (mp.count(msk))
                        uf.merge(i, mp[msk]);
                    
                    // 替换字母
                    if (!(ws[i] & (1 << j))) continue;
                    for (int k = 0; k < 26; ++ k) {
                        if (ws[i] & (1 << k)) continue;
                        int word = ws[i] ^ (1 << j) ^ (1 << k);
                        if (mp.count(word))
                            uf.merge(i, mp[word]);
                    }
                }
            }
            if (!mp.count(ws[i]))
            mp[ws[i]] = i;
        }

        ans[0] = uf.num;
        for (int i = 0; i < n; ++ i) ans[1] = max(ans[1], uf.sz[i]);
        return ans;
    }
};


// BFS
class Solution {
public:
    vector<int> groupStrings(vector<string>& words) {
        // 使用哈希映射统计每一个二进制表示出现的次数
        unordered_map<int, int> wordmasks;
        for (const string& word: words) {
            int mask = 0;
            for (char ch: word) {
                mask |= (1 << (ch - 'a'));
            }
            ++wordmasks[mask];
        }
        
        // 辅助函数，用来得到 mask 的所有可能的相邻节点
        auto get_adjacent = [](int mask) -> vector<int> {
            vector<int> adj;
            // 将一个 0 变成 1，或将一个 1 变成 0
            for (int i = 0; i < 26; ++i) {
                adj.push_back(mask ^ (1 << i));
            }
            // 将一个 0 变成 1，且将一个 1 变成 0
            for (int i = 0; i < 26; ++i) {
                if (mask & (1 << i)) {
                    for (int j = 0; j < 26; ++j) {
                        if (!(mask & (1 << j))) {
                            adj.push_back(mask ^ (1 << i) ^ (1 << j));
                        }
                    }
                }
            }
            return adj;
        };
        
        unordered_set<int> used;
        int best = 0, cnt = 0;
        for (const auto& [mask, occ]: wordmasks) {
            if (used.count(mask)) {
                continue;
            }
            // 从一个未搜索过的节点开始进行广度优先搜索，并求出对应连通分量的大小
            queue<int> q;
            q.push(mask);
            used.insert(mask);
            // total 记录联通分量的大小
            int total = occ;
            while (!q.empty()) {
                int u = q.front();
                q.pop();
                for (int v: get_adjacent(u)) {
                    if (wordmasks.count(v) && !used.count(v)) {
                        q.push(v);
                        used.insert(v);
                        total += wordmasks[v];
                    }
                }
            }
            best = max(best, total);
            ++cnt;
        }
            
        return {cnt, best};
    }
};

作者：LeetCode-Solution
链接：https://leetcode-cn.com/problems/groups-of-strings/solution/zi-fu-chuan-fen-zu-by-leetcode-solution-a8dr/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。