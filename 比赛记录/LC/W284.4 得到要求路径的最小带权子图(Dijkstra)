给你一个整数 n ，它表示一个 带权有向 图的节点数，节点编号为 0 到 n - 1 。
同时给你一个二维整数数组 edges ，其中 edges[i] = [fromi, toi, weighti] ，表示从 fromi 到 toi 有一条边权为 weighti 的 有向 边。
最后，给你三个 互不相同 的整数 src1 ，src2 和 dest ，表示图中三个不同的点。
请你从图中选出一个 边权和最小 的子图，使得从 src1 和 src2 出发，在这个子图中，都 可以 到达 dest 。如果这样的子图不存在，请返回 -1 。
子图 中的点和边都应该属于原图的一部分。子图的边权和定义为它所包含的所有边的权值之和。

示例 1：
输入：n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5
输出：9
解释：
注意，子图 [[1,0,3],[0,5,6]] 也能得到最优解，但无法在满足所有限制的前提下，得到更优解。

示例 2：
输入：n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2
输出：-1
解释：
可以看到，不存在从节点 1 到节点 2 的路径，所以不存在任何子图满足所有限制。
 

提示：
3 <= n <= 105
0 <= edges.length <= 105
edges[i].length == 3
0 <= fromi, toi, src1, src2, dest <= n - 1
fromi != toi
src1 ，src2 和 dest 两两不同。
1 <= weight[i] <= 105

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-weighted-subgraph-with-the-required-paths
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/*
class Solution {
    const long long INF = 1e10 + 5;
public:
    long long minimumWeight(int n, vector<vector<int>>& edges, int src1, int src2, int dest) {
        vector<vector<pair<int, int>>> adj(n), radj(n);
        for (auto &e :edges) {
            adj[e[0]].emplace_back(e[1], e[2]);
            radj[e[1]].emplace_back(e[0], e[2]);
        }
        auto getMinCost = [&] (int src, vector<vector<pair<int, int>>>& adj) -> vector<long long> {
            priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<>> pq;
            pq.push({0, src});
            vector<long long> dist(n, INF);
            dist[src] = 0;
            while (!pq.empty()) {
                auto [c, u] = pq.top(); pq.pop();
                if (c != dist[u]) continue;
                for (auto &[v, d] : adj[u]) {
                    if (c + d < dist[v]) {
                        pq.push({dist[v] = c + d, v});
                    }
                }
            }
            return dist;
        };
        
        auto dist1 = getMinCost(src1, adj);
        if (dist1[dest] == INF) return -1;
        auto dist2 = getMinCost(src2, adj);
        if (dist2[dest] == INF) return -1;
        
        auto dist3 = getMinCost(dest, radj);
        long long ans = LLONG_MAX;
        for (int i = 0; i < n; ++ i) {
            ans = min(ans, dist1[i] + dist2[i] + dist3[i]);
        }
        return ans;
    }
};
*/