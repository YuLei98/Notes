一张桌子上总共有 n 个硬币 栈 。每个栈有 正整数 个带面值的硬币。

每一次操作中，你可以从任意一个栈的 顶部 取出 1 个硬币，从栈中移除它，并放入你的钱包里。

给你一个列表 piles ，其中 piles[i] 是一个整数数组，分别表示第 i 个栈里 从顶到底 的硬币面值。同时给你一个正整数 k ，请你返回在 恰好 进行 k 次操作的前提下，你钱包里硬币面值之和 最大为多少 。

 

示例 1：



输入：piles = [[1,100,3],[7,8,9]], k = 2
输出：101
解释：
上图展示了几种选择 k 个硬币的不同方法。
我们可以得到的最大面值为 101 。
示例 2：

输入：piles = [[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]], k = 7
输出：706
解释：
如果我们所有硬币都从最后一个栈中取，可以得到最大面值和。
 

提示：

n == piles.length
1 <= n <= 1000
1 <= piles[i][j] <= 105
1 <= k <= sum(piles[i].length) <= 2000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-value-of-k-coins-from-piles
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


/*
class Solution {
public:
    int maxValueOfCoins(vector<vector<int>>& piles, int k) {
        const int m = piles.size();
        vector<vector<int>> f(m + 1, vector<int>(k + 1));
        vector<vector<int>> preSum(m + 1, vector<int>(1));
        for (int i = 1; i <= m; ++ i) {
            int n = piles[i - 1].size();
            for (int j = 0; j < n; ++ j) {
                preSum[i].push_back(preSum[i][j] + piles[i - 1][j]);
            }
        }
        
        // 超时
        // vector<int> sum(m + 1);
        // for (int i = 1; i <= m; ++ i) 
        //     sum[i] = sum[i - 1] + piles[i - 1].size();
        
        // for (int i = 0; i < m; ++ i) {
        //     for (int ii = i + 1; ii <= m; ++ ii) {
        //         for (int j = 0, end = min(sum[i], k); j <= end; ++ j) {
        //             for (int t = 1, n = piles[ii - 1].size(); t <= n && j + t <= k; ++ t) {
        //                 f[ii][j + t] = max(f[ii][j + t], f[i][j] + preSum[ii][t]);
        //             }
        //         }
        //     }
        // }

        for (int i = 1; i <= m; ++ i) {
            for (int c = 1; c <= k; ++ c) {
                for (int j = 0, n = piles[i - 1].size(); j <= n and c - j >= 0; ++ j) {
                    f[i][c] = max(f[i][c], f[i - 1][c - j] + preSum[i][j]);
                }
            }
        }

        int ans = 0;
        for (int i = 1; i <= m; ++ i)
            ans = max(ans, f[i][k]);
        return ans;
    }
};
*/