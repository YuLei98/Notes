存在一棵无向连通树，树中有编号从 0 到 n - 1 的 n 个节点， 以及 n - 1 条边。

给你一个下标从 0 开始的整数数组 nums ，长度为 n ，其中 nums[i] 表示第 i 个节点的值。另给你一个二维整数数组 edges ，长度为 n - 1 ，其中 edges[i] = [ai, bi] 表示树中存在一条位于节点 ai 和 bi 之间的边。

删除树中两条 不同 的边以形成三个连通组件。对于一种删除边方案，定义如下步骤以计算其分数：

分别获取三个组件 每个 组件中所有节点值的异或值。
最大 异或值和 最小 异或值的 差值 就是这一种删除边方案的分数。
例如，三个组件的节点值分别是：[4,5,7]、[1,9] 和 [3,3,3] 。三个异或值分别是 4 ^ 5 ^ 7 = 6、1 ^ 9 = 8 和 3 ^ 3 ^ 3 = 3 。最大异或值是 8 ，最小异或值是 3 ，分数是 8 - 3 = 5 。
返回在给定树上执行任意删除边方案可能的 最小 分数。

 

示例 1：


输入：nums = [1,5,5,4,11], edges = [[0,1],[1,2],[1,3],[3,4]]
输出：9
解释：上图展示了一种删除边方案。
- 第 1 个组件的节点是 [1,3,4] ，值是 [5,4,11] 。异或值是 5 ^ 4 ^ 11 = 10 。
- 第 2 个组件的节点是 [0] ，值是 [1] 。异或值是 1 = 1 。
- 第 3 个组件的节点是 [2] ，值是 [5] 。异或值是 5 = 5 。
分数是最大异或值和最小异或值的差值，10 - 1 = 9 。
可以证明不存在分数比 9 小的删除边方案。
示例 2：


输入：nums = [5,5,2,4,4,2], edges = [[0,1],[1,2],[5,2],[4,3],[1,3]]
输出：0
解释：上图展示了一种删除边方案。
- 第 1 个组件的节点是 [3,4] ，值是 [4,4] 。异或值是 4 ^ 4 = 0 。
- 第 2 个组件的节点是 [1,0] ，值是 [5,5] 。异或值是 5 ^ 5 = 0 。
- 第 3 个组件的节点是 [2,5] ，值是 [2,2] 。异或值是 2 ^ 2 = 0 。
分数是最大异或值和最小异或值的差值，0 - 0 = 0 。
无法获得比 0 更小的分数 0 。
 

提示：

n == nums.length
3 <= n <= 1000
1 <= nums[i] <= 108
edges.length == n - 1
edges[i].length == 2
0 <= ai, bi < n
ai != bi
edges 表示一棵有效的树

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/minimum-score-after-removals-on-a-tree
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


/*
func minimumScore(nums []int, edges [][]int) (ans int) {
    n := len(nums)
    g := make([][]int, n)
    for _, e := range edges {
        u, v := e[0], e[1]
        g[u] = append(g[u], v)
        g[v] = append(g[v], u)
    }
    // 记录遍历每个节点的时间戳
    in, out, time := make([]int, n), make([]int, n), 0             
    var dfs func(i, fi int)
    xorsum := make([]int, n)
    dfs = func(i, fi int) {
        time++
        in[i] = time
        xorsum[i] = nums[i]
        for _, v := range g[i] {
            if v != fi {
                dfs(v, i)
                xorsum[i] ^= xorsum[v]
            }
        }
        out[i] = time
    }
    dfs(0, -1)
    
    ans = math.MaxInt32
    score := func(x, y, z int) int { return max(x, max(y, z)) - min(x, min(y, z)) }
    var x, y, z int
    // 枚举删除两条边后的两棵子树的顶点，注意不能是根节点0
    for i := 2; i < n; i++ {
        for j := 1; j < i; j++ {
            if in[i] < in[j] && in[j] <= out[i] {    // 如果 i是j的祖先
                x, y, z = xorsum[j], xorsum[i]^xorsum[j], xorsum[0]^xorsum[i]
            } else if in[j] < in[i] && in[i] <= out[j] {
                x, y, z = xorsum[i], xorsum[i]^xorsum[j], xorsum[0]^xorsum[j]
            } else {
                x, y, z = xorsum[i], xorsum[j], xorsum[0]^xorsum[i]^xorsum[j]
            }
            ans = min(ans, score(x, y, z))
            // 可提前退出
            if ans == 0 {
                return
            }
        }
    }
    return
}
func min(a, b int) int { if a <= b { return a}; return b}
func max(a, b int) int { if a >= b { return a}; return b}
*/