给你一个 值互不相同 的二叉树的根节点 root 。
在一步操作中，你可以选择 同一层 上任意两个节点，交换这两个节点的值。
返回每一层按 严格递增顺序 排序所需的最少操作数目。
节点的 层数 是该节点和根节点之间的路径的边数。

示例 1 ：
输入：root = [1,4,3,7,6,8,5,null,null,null,null,9,null,10]
输出：3
解释：
- 交换 4 和 3 。第 2 层变为 [3,4] 。
- 交换 7 和 5 。第 3 层变为 [5,6,8,7] 。
- 交换 8 和 7 。第 3 层变为 [5,6,7,8] 。
共计用了 3 步操作，所以返回 3 。
可以证明 3 是需要的最少操作数目。

示例 2 ：
输入：root = [1,3,2,7,6,5,4]
输出：3
解释：
- 交换 3 和 2 。第 2 层变为 [2,3] 。 
- 交换 7 和 4 。第 3 层变为 [4,6,5,7] 。 
- 交换 6 和 5 。第 3 层变为 [4,5,6,7] 。
共计用了 3 步操作，所以返回 3 。 
可以证明 3 是需要的最少操作数目。

示例 3 ：
输入：root = [1,2,3,4,5,6]
输出：0
解释：每一层已经按递增顺序排序，所以返回 0 。
 
提示：
树中节点的数目在范围 [1, 105] 。
1 <= Node.val <= 105
树中的所有值 互不相同 。



# 思路：
#       对于一个数组，使其有序的最少交换次数：
#            假设某个循环节中有k个数，则使其有序最少交换次数为k-1次。
#            假设该数组中有m个循环节，则使其有序最少交换次数为(k1-1)+(k2-1)+ ... = k1+k2+...+km-m = n-m

class Solution:
    def minimumOperations(self, root: Optional[TreeNode]) -> int:
        q = [root]
        ans = 0
        while q:
            p, v = [], []
            for node in q:
                v.append(node.val)
                if node.left:
                    p.append(node.left)
                if node.right:
                    p.append(node.right)
            q = p
            m = {x: i for i, x in enumerate(sorted(v))}
            vis = [False] * len(v)
            loops = 0
            for i in range(len(v)):
                j = i
                if vis[j]: continue
                while not vis[j]:
                    vis[j] = True
                    j = m[v[j]]
                loops += 1
            ans += len(v)-loops
        return ans