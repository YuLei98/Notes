题目描述
在N×N的棋盘里面放K个国王，使他们互不攻击，共有多少种摆放方案。国王能攻击到它上下左右，以及左上左下右上右下八个方向上附近的各一个格子，共8个格子。


输入格式
只有一行，包含两个数N，K （ 1 <=N <=9, 0 <= K <= N * N）

输出所得的方案数
样例：
输入
3 2
输出
16

Code
'''
#include<iostream>
#include<vector>
using namespace std;
long long f[11][160][160];  //f[i][j][k]表示第i行是状态j共放了k个国王的方案数
class Solution {
private:
	int N, K;
	int cnt;             //可用状态的数量
	int state[160];		//可用状态     //第一个可用状态为0
	int num[160];         //state[i]放的国王数
public:
	Solution() {}
	Solution(int _N, int _K) :N(_N), K(_K),cnt(0) {}
	void Pre() {
		for (int i = 0; i < 1 << N; ++i) {
			if (i & (i << 1)) continue;   //检查当前行是否冲突
			int sum = 0;
			for (int j = 0; j < N; j++) 
				if (i & (1 << j)) ++sum;   //此状态下放置的国王数
			state[++cnt] = i;
			num[cnt] = sum;
		}
	}
    void print_state(){
        for(int i = 0; i <= cnt; i++){
            cout << bitset<6>(state[i]) << " ";
        }
        cout << endl;
    }
	void Sol() {	
        Pre();
		f[0][1][0]=1;       //初始化第0行状态全为0放0个国王的方案为1
		for (int i = 1; i <= N; ++i) {
			for (int j = 1; j <= cnt; ++j) {    //枚举第i行的状态
				for (int k = 0; k <= K; ++k) {   //枚举前i行放置的国王数
					if(k >= num[j]){
						for (int l = 1; l <= cnt; ++l) {  //枚举第i-1行的状态
							if (!(state[j] & state[l]) && !(state[j] & (state[l] << 1)) && !(state[j] & (state[l] >> 1))){
								f[i][j][k] += f[i - 1][l][k - num[j]];
							}
						}
					}
				}
			}
		}
		long long ans = 0;
		for (int i = 1; i <= cnt; ++i) {    
			ans += f[N][i][K];       //放置K个国王的方案数总和
		}
		printf("%lld",ans);
	}
};
int main() {
	int N, K;
	cin >> N >> K;
	Solution s(N,K);
	s.Sol();
    	//s.print_state();
	return 0;
}
'''
