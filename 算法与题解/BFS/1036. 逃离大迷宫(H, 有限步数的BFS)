在一个 106 x 106 的网格中，每个网格上方格的坐标为 (x, y) 。

现在从源方格 source = [sx, sy] 开始出发，意图赶往目标方格 target = [tx, ty] 。数组 blocked 是封锁的方格列表，其中每个 blocked[i] = [xi, yi] 表示坐标为 (xi, yi) 的方格是禁止通行的。

每次移动，都可以走到网格中在四个方向上相邻的方格，只要该方格 不 在给出的封锁列表 blocked 上。同时，不允许走出网格。

只有在可以通过一系列的移动从源方格 source 到达目标方格 target 时才返回 true。否则，返回 false。

示例 1：
输入：blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]
输出：false
解释：
从源方格无法到达目标方格，因为我们无法在网格中移动。
无法向北或者向东移动是因为方格禁止通行。
无法向南或者向西移动是因为不能走出网格。

示例 2：
输入：blocked = [], source = [0,0], target = [999999,999999]
输出：true
解释：
因为没有方格被封锁，所以一定可以到达目标方格。

提示：
0 <= blocked.length <= 200
blocked[i].length == 2
0 <= xi, yi < 106
source.length == target.length == 2
0 <= sx, sy, tx, ty < 106
source != target
题目数据保证 source 和 target 不在封锁列表内

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/escape-a-large-maze
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


//当且仅当source 和 target 仅有一个被封锁住返回false
//设blocked 的大小为 n, 它所围成的最大结点数是 n * (n - 1) / 2, 如果BFS访问的结点超过它，说明肯定没有被封锁住


//官方题解：https://leetcode-cn.com/problems/escape-a-large-maze/solution/tao-chi-da-mi-gong-by-leetcode-solution-qxhz/

/*
class Solution {
    static constexpr int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, -1, 0, 1};
    struct pair_hash {
        template <class T1, class T2>
        size_t operator () (pair<T1, T2> const &pair) const
        {
            size_t h1 = hash<T1>()(pair.first); //用默认的 hash 处理 pair 中的第一个数据 X1
            size_t h2 = hash<T2>()(pair.second);//用默认的 hash 处理 pair 中的第二个数据 X2
            return h1 ^ h2;
        }
    };
public:
    bool isEscapePossible(vector<vector<int>>& blocked, vector<int>& source, vector<int>& target) {
        if (blocked.size() <= 1) return true;
        const int n = blocked.size();

        unordered_set<pair<int, int>, pair_hash> s;

        for (auto &b: blocked) s.insert({b[0], b[1]});

        auto ck = [](pair<int, int>& p) -> bool {
            return p.first >= 0 and p.first < 1000000 and p.second >= 0 and p.second < 1000000;
        };
        
        auto isInCircle = [&](vector<int>& node) -> bool {
            queue<pair<int, int>> que;
            unordered_set<pair<int, int>, pair_hash> vis;
            vis.insert({node[0], node[1]});
            que.push({node[0], node[1]});
            int cnt = 0;

            while (!que.empty()){
                cnt ++;
                if (cnt > n * (n - 1) / 2)
                    return false;
                auto front = que.front(); que.pop();
                for (int i = 0; i < 4; ++ i){
                    pair<int, int> p{front.first + dx[i], front.second + dy[i]};
                    if (ck(p) and !s.count(p) and !vis.count(p)){
                        que.push(p);
                        vis.insert(p);
                    }
                }
            }
            return true;
        };

        return !(isInCircle(source) ^ isInCircle(target));
    }
};
*/