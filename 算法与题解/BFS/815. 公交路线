给你一个数组 routes ，表示一系列公交线路，其中每个 routes[i] 表示一条公交线路，第 i 辆公交车将会在上面循环行驶。

例如，路线 routes[0] = [1, 5, 7] 表示第 0 辆公交车会一直按序列 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... 这样的车站路线行驶。
现在从 source 车站出发（初始时不在公交车上），要前往 target 车站。 期间仅可乘坐公交车。

求出 最少乘坐的公交车数量 。如果不可能到达终点车站，返回 -1 。
 

示例 1：
输入：routes = [[1,2,7],[3,6,7]], source = 1, target = 6
输出：2
解释：最优策略是先乘坐第一辆公交车到达车站 7 , 然后换乘第二辆公交车到车站 6 。 

示例 2：
输入：routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12
输出：-1

提示：
1 <= routes.length <= 500.
1 <= routes[i].length <= 105
routes[i] 中的所有值 互不相同
sum(routes[i].length) <= 105
0 <= routes[i][j] < 106
0 <= source, target < 106

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/bus-routes
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


//思路：把每一条公交路线缩成一个顶点，建图，再BFS。
/*
class Solution {
public:
    int numBusesToDestination(vector<vector<int>>& routes, int source, int target) {
        if (source == target) return 0;
        const int n = routes.size();
        for (int i = 0; i < n; ++ i){
            sort(routes[i].begin(), routes[i].end());                          //排序后用于后面查找二分
        }
        vector<vector<int>> edges(n);
        for (int i = 0; i < n; ++ i){
            for (int j = i + 1; j < n; ++ j){
                int k = 0, ilen = routes[i].size();
                int l = 0, jlen = routes[j].size();
                while (k < ilen && l < jlen){
                    if (routes[i][k] == routes[j][l]){
                        edges[i].emplace_back(j);
                        edges[j].emplace_back(i);
                        break;
                    }else if (routes[i][k] < routes[j][l]) k ++;
                    else l ++;
                }
            }
        }
        queue<int> que;
        vector<bool> v(n);
        for (int i = 0; i < n; ++ i){
            for (auto x: routes[i]){
                if (x == source){                 //把刚开始能上的公交车都加入队列
                    que.push(i);
                    v[i] = true;
                    break;
                }
            }
        }
        int ans = 1;
        while(!que.empty()){
            int sz = que.size();
            while (sz--){
                auto route = que.front();                           //二分查找终点是否在该条路线
                que.pop();
                int l = 0, r = (int)routes[route].size() - 1;
                while (l <= r){
                    int m = (l + r) / 2;
                    if (routes[route][m] == target) return ans;
                    else if (routes[route][m] < target) l = m + 1;             
                    else r = m - 1;
                }
                for (int e: edges[route]){                          //不在这条路线，把与该路线相邻的路线加入队列
                    if (!v[e]){
                        que.push(e);
                        v[e] = true;
                    }
                }
            }
            ans ++;
        }
        return -1;
    }
};
*/