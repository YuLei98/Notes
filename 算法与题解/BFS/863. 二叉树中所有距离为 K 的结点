给定一个二叉树（具有根结点 root）， 一个目标结点 target ，和一个整数值 K 。

返回到目标结点 target 距离为 K 的所有结点的值的列表。 答案可以以任何顺序返回。

示例 1：

输入：root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2
输出：[7,4,1]

提示：

给定的树是非空的。
树上的每个结点都具有唯一的值 0 <= node.val <= 500 。
目标结点 target 是树上的结点。
0 <= K <= 1000.

思路： 树转图，再BFS。
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        queue<TreeNode *> que;
        que.push(root);

        map<int, vector<int>> mp;
        while(!que.empty()){
            int size = que.size();
            while (size--){
                auto front = que.front(); que.pop();
                if (front->left){
                    mp[front->val].push_back(front->left->val);
                    mp[front->left->val].push_back(front->val);
                    que.push(front->left);
                }
                if (front->right){
                    mp[front->val].push_back(front->right->val);
                    mp[front->right->val].push_back(front->val);
                    que.push(front->right);
                }
            }
        }

        // for (auto [a, b]: mp){
        //     for (auto c : b){
        //         cout << a << " " << c;
        //     }
        //     cout << endl;
        // }

        queue<int> q;
        vector<int> res;

        q.push(target->val);
        vector<bool> v(501);
        v[target->val] = true;
        while (k-- && !q.empty()){
            int size = q.size();
            while (size--){
                auto node = q.front(); q.pop();
                for (auto x: mp[node]) 
                    if (!v[x]) {
                        v[x] = true; 
                        q.push(x);
                    }
            }
        }
        while (!q.empty()){
            res.push_back(q.front());
            q.pop();
        }
        return res;
    }

    
};


//官网题解
class Solution {
    unordered_map<int, TreeNode*> parents;
    vector<int> ans;

    void findParents(TreeNode* node) {
        if (node->left != nullptr) {
            parents[node->left->val] = node;
            findParents(node->left);
        }
        if (node->right != nullptr) {
            parents[node->right->val] = node;
            findParents(node->right);
        }
    }

    void findAns(TreeNode* node, TreeNode* from, int depth, int k) {
        if (node == nullptr) {
            return;
        }
        if (depth == k) {
            ans.push_back(node->val);
            return;
        }
        if (node->left != from) {
            findAns(node->left, node, depth + 1, k);
        }
        if (node->right != from) {
            findAns(node->right, node, depth + 1, k);
        }
        if (parents[node->val] != from) {
            findAns(parents[node->val], node, depth + 1, k);
        }
    }

public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        // 从 root 出发 DFS，记录每个结点的父结点
        findParents(root);

        // 从 target 出发 DFS，寻找所有深度为 k 的结点
        findAns(target, nullptr, 0, k);

        return ans;
    }
};
