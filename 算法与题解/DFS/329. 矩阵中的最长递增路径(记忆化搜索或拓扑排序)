给定一个 m x n 整数矩阵 matrix ，找出其中 最长递增路径 的长度。

对于每个单元格，你可以往上，下，左，右四个方向移动。 你 不能 在 对角线 方向上移动或移动到 边界外（即不允许环绕）。

示例 1：
输入：matrix = [[9,9,4],[6,6,8],[2,1,1]]
输出：4 
解释：最长递增路径为 [1, 2, 6, 9]。

示例 2：
输入：matrix = [[3,4,5],[3,2,6],[2,2,1]]
输出：4 
解释：最长递增路径是 [3, 4, 5, 6]。注意不允许在对角线方向上移动。

示例 3：
输入：matrix = [[1]]
输出：1 

提示：
m == matrix.length
n == matrix[i].length
1 <= m, n <= 200
0 <= matrix[i][j] <= 231 - 1

/*
class Solution {
    vector<vector<int>> f;
    int m, n;
    int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, -1, 0, 1};
    int ans = 0;
public:
    Solution(): f(201, vector<int>(201, -1)){}
    inline bool ck(int x, int y){
        return x >= 0 && x < m && y >= 0 && y < n;
    }
    void dfs(vector<vector<int>>& matrix, int x, int y){
        if (f[x][y] != -1) return ;
        f[x][y] = 1;
        for (int i = 0; i < 4; ++ i){
            int xx = x + dx[i], yy = y + dy[i];
            if (!ck(xx, yy) || matrix[xx][yy] <= matrix[x][y]) continue;
            dfs(matrix, xx, yy);
            f[x][y] = max(f[x][y], f[xx][yy] + 1);
        }
    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        m = matrix.size(), n = matrix[0].size();
        for (int i = 0; i < m; ++ i){
            for (int j = 0; j < n; ++ j){
                if (f[i][j] == -1){
                    dfs(matrix, i, j);
                }
                ans = max(ans, f[i][j]);
            }
        }
        return ans;
    }
};
*/

/*
class Solution {
    vector<vector<int>> f;
    int m, n;
    int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, -1, 0, 1};
    int ans = 0;
public:
    Solution(): f(201, vector<int>(201, -1)){}
    inline bool ck(int x, int y){
        return x >= 0 && x < m && y >= 0 && y < n;
    }
    int dfs(vector<vector<int>>& matrix, int x, int y){
        if (f[x][y] != -1) return f[x][y];
        f[x][y] = 1;
        for (int i = 0; i < 4; ++ i){
            int xx = x + dx[i], yy = y + dy[i];
            if (!ck(xx, yy) || matrix[xx][yy] <= matrix[x][y]) continue;
            f[x][y] = max(f[x][y], dfs(matrix, xx, yy) + 1);
        }
        return f[x][y];
    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        m = matrix.size(), n = matrix[0].size();
        for (int i = 0; i < m; ++ i){
            for (int j = 0; j < n; ++ j){
                ans = max(ans, dfs(matrix, i, j));
            }
        }
        return ans;
    }
};
*/