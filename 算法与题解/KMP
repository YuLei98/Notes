# KMP算法：

     ## 给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回 -1 。
     
     '''cpp
     class Solution {
     public:
        int strStr(string haystack, string needle) {
            int n = haystack.size(), m = needle.size();
            if (m == 0) {
                return 0;
            }
            vector<int> next(m);                                    //next数组
            for (int i = 1, j = 0; i < m; i++) {
                while (j > 0 && needle[i] != needle[j]) {
                    j = next[j - 1];
                }
                if (needle[i] == needle[j]) {
                    j++;
                }
                next[i] = j;
            }
            for (int i = 0, j = 0; i < n; i++) {
                while (j > 0 && haystack[i] != needle[j]) {
                    j = next[j - 1];
                }
                if (haystack[i] == needle[j]) {
                    j++;
                }
                if (j == m) {
                    return i - m + 1;
                }
            }
            return -1;
        }
    };
    '''


# 拓展KMP (Z 函数):
#在该算法中，我们从 1 到 n - 1 顺次计算 z[i] 的值 (z[0] = 0)。在计算 z[i] 的过程中，我们会利用已经计算好的 z[0], ....., z[i - 1]。
对于 i, 我们称区间 [i, i + z[i] - 1] 是 i 的匹配段，也可以叫 Z-box。

算法的过程中我们维护右端点最靠右的匹配段。为了方便，记作 [l, r]。根据定义, s[l, r] 是 s 的前缀。在计算 z[i] 时我们保证 l <= i。初始时 l = r = 0。
在计算 z[i] 的过程中：

如果 i <= r, 那么根据 [l, r] 的定义有 s[i, r] = s[i - l, r - l]，因此 z[i] >= min(z[i - l], r - i + 1)。这时：
    若 z[i - l] < r - i + 1, 则 z[i] = z[i - l]。
    否则 z[i - l] >= r - i + 1, 这时我们令 z[i] = r - i + 1, 然后暴力枚举下一个字符扩展 z[i] 直到不能扩展为止。
如果 i > r, 那么我们直接按照朴素算法, 从 s[i] 开始比较，暴力求出 z[i]。
在求出 z[i] 后，如果 i + z[i] - 1 > r, 我们就需要更新 [l, r]，即令 l = i, r = i + z[i] - 1。

    '''
    // C++ Version
    vector<int> z_function(string s) {
    int n = (int)s.length();
    vector<int> z(n);
    for (int i = 1, l = 0, r = 0; i < n; ++i) {
        if (i <= r && z[i - l] < r - i + 1) {
        z[i] = z[i - l];
        } else {
        z[i] = max(0, r - i + 1);
        while (i + z[i] < n && s[z[i]] == s[i + z[i]]) ++z[i];
        }
        if (i + z[i] - 1 > r) l = i, r = i + z[i] - 1;
    }
    return z;
    }
    '''