当 k 个日程安排有一些时间上的交叉时（例如 k 个日程安排都在同一时间内），就会产生 k 次预订。

给你一些日程安排 [start, end) ，请你在每个日程安排添加后，返回一个整数 k ，表示所有先前日程安排会产生的最大 k 次预订。

实现一个 MyCalendarThree 类来存放你的日程安排，你可以一直添加新的日程安排。

MyCalendarThree() 初始化对象。
int book(int start, int end) 返回一个整数 k ，表示日历中存在的 k 次预订的最大值。
 

示例：
输入：
["MyCalendarThree", "book", "book", "book", "book", "book", "book"]
[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]
输出：
[null, 1, 1, 2, 3, 3, 3]

解释：
MyCalendarThree myCalendarThree = new MyCalendarThree();
myCalendarThree.book(10, 20); // 返回 1 ，第一个日程安排可以预订并且不存在相交，所以最大 k 次预订是 1 次预订。
myCalendarThree.book(50, 60); // 返回 1 ，第二个日程安排可以预订并且不存在相交，所以最大 k 次预订是 1 次预订。
myCalendarThree.book(10, 40); // 返回 2 ，第三个日程安排 [10, 40) 与第一个日程安排相交，所以最大 k 次预订是 2 次预订。
myCalendarThree.book(5, 15); // 返回 3 ，剩下的日程安排的最大 k 次预订是 3 次预订。
myCalendarThree.book(5, 10); // 返回 3
myCalendarThree.book(25, 55); // 返回 3
 

提示：
0 <= start < end <= 109
每个测试用例，调用 book 函数最多不超过 400次



/*
class MyCalendarThree {
	int N = 1e9;
	struct Node{
		Node *ls, *rs;
		int val, add;
		Node(): ls(nullptr), rs(nullptr), val(0), add(0) {}
	};
	Node *root = new Node();
	void update(Node *rt, int lc, int rc, int l, int r, int v) {
		if (l <= lc && rc <= r) {
			rt->val += v;
			rt->add += v;
			return;
		}
		pushdown(rt);
		int mid = (lc + rc) / 2;
		if (l <= mid) update(rt->ls, lc, mid, l, r, v);
		if (r > mid) update(rt->rs, mid+1, rc, l, r, v);
		pushup(rt);
	}
	int query(Node *rt, int lc, int rc, int l, int r) {
		if (l <= rc && rc <= r) return rt->val;
		pushdown(rt);
		int mid = (lc + rc) / 2, ans = 0;
		if (l <= mid) ans = query(rt->ls, lc, mid, l, r);
		if (r > mid) ans = max(ans, query(rt->rs, mid+1, rc, l, r));
		return ans;
	}
	void pushdown(Node *rt) {
		if (rt->ls == nullptr) rt->ls = new Node();
		if (rt->rs == nullptr) rt->rs = new Node();
		if (rt->add == 0) return;
		rt->ls->add += rt->add; rt->rs->add += rt->add;
		// rt->ls->val += rt->val; rt->rs->val += rt->val;      // 这里注意
		rt->ls->val += rt->add; rt->rs->val += rt->add;
		rt->add = 0;
	}
	void pushup(Node *rt) {
		rt->val = max(rt->ls->val, rt->rs->val);
	}
public:
	MyCalendarThree() {}
	int book(int start, int end) {
		update(root, 0, N, start, end-1, 1);
		return query(root, 0, N, 0, N);
	}
};
*/