#include <vector>
#include <utility>
#include <queue>
using namespace std;

class Floyd {
public:
    const int INF = 0x3f3f3f3f;
    void floyd(int n, vector<vector<int>>& edges) {
        vector<vector<int>> d(n, vector<int>(n, INF));
        for (int i = 0; i < n; ++i) d[i][i] = 0;
        for (auto e: edges){
            d[e[0]][e[1]] = e[2], d[e[1]][e[0]] = e[2];
        }
        for (int k = 0; k < n; ++k){
            for (int i = 0; i < n; ++i){
                for (int j = 0; j < n; ++j){
                        d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
                }
            }
        }
    }
};

class Dijkstra{
public:
    const int INF = 0x3f3f3f3f;
    void dijkstra(vector<int>& dist, vector<vector<pair<int, int>>>& adj, int s){
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
        pq.emplace(0, s);
        dist[s] = 0;

        while (!pq.empty()){
            auto [d, u] = pq.top();
            pq.pop();
            if (dist[u] < d) continue;     //if (dist[u] != d) continue;
            for (auto &[v, w] : adj[u]){
                if (d + w < dist[v]){
                    pq.emplace(dist[v] = d + w, u);
                }
            }
        }
    }
    void func(int n, vector<vector<int>>& edges) {
        vector<vector<pair<int, int>>> adj(n);
        for (auto &e : edges){
            int u = e[0], v = e[1], w = e[2];
            adj[u].emplace_back(v, w); adj[v].emplace_back(u, w);
        }

        vector<vector<int>> res;
        for (int i = 0; i < n; ++i){
            vector<int> dist(n, INF);
            dijkstra(dist, adj, i);
            res.emplace_back(dist);
        }
    }
}

class Bellman_Ford {
    const int INF = 0x3f3f3f3f;
public:
    int bellman_ford(int n, vector<vector<int>>& edges) {
        vector<vector<int>> res;
        for (int i=0; i<n; ++i) {
            vector<int>distances(n, INF); //单源最短路径数组
            distances[i] = 0;
            for (auto &e :edges) if (e[0] == i) distances[e[1]] = e[2];else if (e[1] == i) distances[e[0]] = e[2];
            for (int i = 0; i < n - 1; ++i){
                for (auto &e : edges){
                    distances[e[1]] = min(distances[e[0]] + e[2], distances[e[1]]);
                    distances[e[0]] = min(distances[e[1]] + e[2], distances[e[0]]);
                }
            }
            res.emplace_back(distances);
        }
        return res;
    }
};