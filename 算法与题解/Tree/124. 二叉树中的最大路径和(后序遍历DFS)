路径 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 至多出现一次 。该路径 至少包含一个 节点，且不一定经过根节点。

路径和 是路径中各节点值的总和。

给你一个二叉树的根节点 root ，返回其 最大路径和 。

示例 1：
输入：root = [1,2,3]
输出：6
解释：最优路径是 2 -> 1 -> 3 ，路径和为 2 + 1 + 3 = 6

示例 2：
输入：root = [-10,9,20,null,null,15,7]
输出：42
解释：最优路径是 15 -> 20 -> 7 ，路径和为 15 + 20 + 7 = 42

提示：
树中节点数目范围是 [1, 3 * 104]
-1000 <= Node.val <= 1000

链接：https://leetcode-cn.com/problems/binary-tree-maximum-path-sum


/*
class Solution {
    int ans;
public:
    int maxPathSum(TreeNode* root) {
        ans = root->val;
        dfs(root);
        return ans;
    }
    int dfs(TreeNode* root){
        if (!root) return 0;
        int left = dfs(root->left);
        int right = dfs(root->right);
		//              只有当前结点，			 左子树                 右子树	             当前节点+左子树	  当前节点+右子树	  当前节点+左右子树
        ans = max({ans, root->val, root->left ? left : -1001, root->right ? right : -1001, root->val + left, root->val + right, root->val + left + right});
        return max(root->val, root->val + max(left, right));
    }
};
*/


/*
class Solution {
    int dfs(TreeNode* root) {
        if (!root) return 0;
        auto left = dfs(root->left);
        auto right = dfs(root->right);
        res = max(res, root->val + left + right);
        return max(0, root->val + max(left, right));
    }
public:
    int maxPathSum(TreeNode* root) {
        auto it = dfs(root);
        return res;
    }
private:
    int res{-10000};
};
*/