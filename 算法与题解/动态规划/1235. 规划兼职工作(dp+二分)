你打算利用空闲时间来做兼职工作赚些零花钱。

这里有 n 份兼职工作，每份工作预计从 startTime[i] 开始到 endTime[i] 结束，报酬为 profit[i]。

给你一份兼职工作表，包含开始时间 startTime，结束时间 endTime 和预计报酬 profit 三个数组，请你计算并返回可以获得的最大报酬。

注意，时间上出现重叠的 2 份工作不能同时进行。

如果你选择的工作在时间 X 结束，那么你可以立刻进行在时间 X 开始的下一份工作。

 

示例 1：
输入：startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
输出：120
解释：
我们选出第 1 份和第 4 份工作， 
时间范围是 [1-3]+[3-6]，共获得报酬 120 = 50 + 70。

示例 2：
输入：startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
输出：150
解释：
我们选择第 1，4，5 份工作。 
共获得报酬 150 = 20 + 70 + 60。

示例 3：
输入：startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
输出：6

提示：
1 <= startTime.length == endTime.length == profit.length <= 5 * 10^4
1 <= startTime[i] < endTime

//思路：对结尾时间排序，对于某个任务，二分找到结束时间不早于该任务的开始时间的最后一个任务，进行状态转移

//用一个数组记录所有任务的结束时间从小到大排序
/*
class Solution {
public:
	int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        const int n = startTime.size();
        vector<int> idx(n);
        iota(idx.begin(), idx.end(), 0);
        sort(idx.begin(), idx.end(), [&](int i, int j){
        //    return endTime[i] < endTime[j] || (endTime[i] == endTime[j] && startTime[i] < startTime[j]); 
           return endTime[i] < endTime[j];
        });

        vector<int> f(n); 
        f[0] = profit[idx[0]];   
        for (int i = 1; i < n; ++ i){                                    
            int l = 0, r = i - 1;
			//last记录最后一个结束时间不早于第i个任务的开始时间的任务
            int last = -1;                                // int last = r;    错误
            while (l <= r){
                int m = (l + r) / 2;
                // cout << m << " ";
                if (endTime[idx[m]] > startTime[idx[i]])
                    r = m - 1;
                else{
                    last = m;
                    l = m + 1;
                }                                      
            } 
            // if (last == -1)
            //     f[i] = max(f[i - 1], profit[idx[i]]);
            // else
            //     f[i] = max(f[i - 1], f[last] + profit[idx[i]]);

            f[i] = max(f[i - 1], profit[idx[i]] + (last == -1 ? 0 : f[last]));
        }


        return f[n - 1];
    }
};
*/

//结构体
/*
class Solution {
public:
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        struct job{
            int s, e, p;
            job(int s, int e, int p): s(s), e(e), p(p){}
            bool operator < (const job& that){
                return e < that.e;
            }
        };
        const int n = profit.size();
        vector<job> jobs;
        for (int i = 0; i < n; ++ i){
            jobs.emplace_back(startTime[i], endTime[i], profit[i]);
        }

        sort(jobs.begin(), jobs.end());
        vector<int> f(n);
        f[0] = jobs[0].p;
        for (int i = 1; i < n; ++ i){
            int l = 0, r = i - 1;
            int last = -1;
            while (l <= r){
                int m = (l + r) / 2;
                if (jobs[m].e > jobs[i].s)
                    r = m - 1;
                else{
                    last = m;
                    l = m + 1;
                }
            }
            f[i] = max(f[i - 1], jobs[i].p + (last == -1 ? 0 : f[last]));
        }
        return f[n - 1];
    }
};
*/