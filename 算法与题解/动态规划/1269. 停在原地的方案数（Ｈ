有一个长度为 arrLen 的数组，开始有一个指针在索引 0 处。
每一步操作中，你可以将指针向左或向右移动 1 步，或者停在原地（指针不能被移动到数组范围外）。
给你两个整数 steps 和 arrLen ，请你计算并返回：在恰好执行 steps 次操作以后，指针仍然指向索引 0 处的方案数。
由于答案可能会很大，请返回方案数 模 10^9 + 7 后的结果。

示例 1：
输入：steps = 3, arrLen = 2
输出：4
解释：3 步后，总共有 4 种不同的方法可以停在索引 0 处。
向右，向左，不动
不动，向右，向左
向右，不动，向左
不动，不动，不动

示例  2：
输入：steps = 2, arrLen = 4
输出：2
解释：2 步后，总共有 2 种不同的方法可以停在索引 0 处。
向右，向左
不动，不动

示例 3：
输入：steps = 4, arrLen = 2
输出：8

提示：
1 <= steps <= 500
1 <= arrLen <= 10^6


/*
    思路：动态规划，和P1057思路类似
    
    f[i][j]表示经过j步后，指针停在i处的方案数。arrLen的范围很大，steps范围较小，dp数组不必开arrLen那么大（会超时），只需开min(arrLen, steps) 就行，因为经过steps步后，指针只可能到steps，也
    可以再开小一点，取min(arrLen, steps/2)，因为超过指针走到超过steps/2的地方，经过stps步之后就不可能回到0了。
*/
class Solution {
public:
    int numWays(int steps, int arrLen) {
        vector<vector<ll>> f(501, vector<ll>(steps + 1));
        f[0][0] = 1;
        FFOR(j, 1, steps){
            FOR(i, 0, min(steps + 1, arrLen)){  
                f[i][j] =((i >= 1 ? f[i - 1][j - 1] : 0) + (i + 1 < _i ? f[i + 1][j - 1] : 0) + f[i][j - 1]) % MOD;
            }
        }
        return f[0][steps];
    }
};
