给你一个由小写字母组成的字符串 s，和一个整数 k。

请你按下面的要求分割字符串：

首先，你可以将 s 中的部分字符修改为其他的小写英文字母。
接着，你需要把 s 分割成 k 个非空且不相交的子串，并且每个子串都是回文串。
请返回以这种方式分割字符串所需修改的最少字符数。

 

示例 1：

输入：s = "abc", k = 2
输出：1
解释：你可以把字符串分割成 "ab" 和 "c"，并修改 "ab" 中的 1 个字符，将它变成回文串。
示例 2：

输入：s = "aabbc", k = 3
输出：0
解释：你可以把字符串分割成 "aa"、"bb" 和 "c"，它们都是回文串。
示例 3：

输入：s = "leetcode", k = 8
输出：0
 

提示：

1 <= k <= s.length <= 100
s 中只含有小写英文字母。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/palindrome-partitioning-iii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/*
class Solution:
    def palindromePartition(self, s: str, k: int) -> int:
        n = len(s)
        f = [[101 for _ in range(k + 1)] for _ in range(n + 1)]
        for i in range(k + 1):
            f[i][i] = 0
        for i in range(2, n + 1):
            for kk in range(1, min(k, i) + 1):
                for j in range(i - 1, min(kk, i) - 2, -1):
                    # l, r, c = j + 1, i, 0
                    # while l < r:
                    #     if s[l - 1] != s[r - 1]:
                    #         c += 1
                    #     l += 1
                    #     r -= 1
                    
                    # c = sum(1 for _ in range(j + 1, (i + j + 2) // 2) if s[_ - 1] != s[i + j - _])
                    # f[i][kk] = min(f[i][kk], f[j][kk - 1] + c)

                    f[i][kk] = min(f[i][kk], f[j][kk - 1] + sum(1 for _ in range(j + 1, (i + j + 2) // 2) if s[_ - 1] != s[i + j - _]))
        return f[n][k]
*/

/*
class Solution:
    def palindromePartition(self, s: str, k: int) -> int:
        n = len(s)
        f = [[101 if _ != __ else 0 for _ in range(k + 1)] for __ in range(n + 1)]
        for i in range(2, n + 1):
            for kk in range(1, min(k, i) + 1):
                for j in range(i - 1, min(kk, i) - 2, -1):
                    f[i][kk] = min(f[i][kk], f[j][kk - 1] + sum(1 for _ in range(j + 1, (i + j + 2) // 2) if s[_ - 1] != s[i + j - _]))
        return f[n][k]
*/