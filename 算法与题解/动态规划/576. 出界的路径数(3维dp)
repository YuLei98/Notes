
给你一个大小为 m x n 的网格和一个球。球的起始坐标为 [startRow, startColumn] 。你可以将球移到在四个方向上相邻的单元格内（可以穿过网格边界到达网格之外）。你 最多 可以移动 maxMove 次球。

给你五个整数 m、n、maxMove、startRow 以及 startColumn ，找出并返回可以将球移出边界的路径数量。因为答案可能非常大，返回对 109 + 7 取余 后的结果。

 

示例 1：
输入：m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0
输出：6

示例 2：
输入：m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1
输出：12
 

提示：
1 <= m, n <= 50
0 <= maxMove <= 50
0 <= startRow < m
0 <= startColumn < n

using namespace luoyu;
class Solution {
public:
    //BFS TLE
    // static constexpr int dx[4] = {0, 1, 0, -1};
    // static constexpr int dy[4] = {1, 0, -1, 0};
    // int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
    //     queue<pair<int, int>> que;
    //     auto ck = [=](int x, int y) -> bool {
    //         return x >= 0 && y >= 0 && x < m && y < n;
    //     };
    //     que.emplace(startRow, startColumn);
    //     int res = 0;
    //     while (maxMove--){
    //         int sz = que.size();
    //         while (sz--){
    //             auto [xx, yy] = que.front();
    //             que.pop();
    //             for (int i = 0; i < 4; ++i){
    //                 int x = xx + dx[i], y = yy + dy[i];
    //                 if (!ck(x, y)) res++;
    //                 else que.emplace(x, y);
    //             }
    //         }
    //     }
    //     return res;
    // }





    int dp[51][51][52];                                                          //dp[i][j][k]表示移动k次处于位置(i, j)的路径数。
    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        auto ck = [=](int x, int y) -> bool {
            return x >= 0 && y >= 0 && x < m && y < n;
        };
        memset(dp, 0, sizeof(dp));
        dp[startRow][startColumn][0] = 1;
        int res = 0;
        FOR (k, 0, maxMove){
            FOR (i, 0, m){
                FOR (j, 0, n){
                    if (dp[i][j][k] > 0){
                        FOR (m, 0, 4){
                            int x = i + dx[m], y = j + dy[m];
                            if (ck(x, y)){
                                dp[x][y][k + 1] += dp[i][j][k];
                                dp[x][y][k + 1] %= MOD;
                            }else{
                                res += dp[i][j][k];
                                res %= MOD;
                            }
                        }
                    }
                }
            }
        }
        return res;
    }
};