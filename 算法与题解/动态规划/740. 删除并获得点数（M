给你一个整数数组 nums ，你可以对它进行一些操作。
每次操作中，选择任意一个 nums[i] ，删除它并获得 nums[i] 的点数。之后，你必须删除每个等于 nums[i] - 1 或 nums[i] + 1 的元素。
开始你拥有 0 个点数。返回你能通过这些操作获得的最大点数。

示例 1：
输入：nums = [3,4,2]
输出：6
解释：
删除 4 获得 4 个点数，因此 3 也被删除。
之后，删除 2 获得 2 个点数。总共获得 6 个点数。

示例 2：
输入：nums = [2,2,3,3,3,4]
输出：9
解释：
删除 3 获得 3 个点数，接着要删除两个 2 和 4 。
之后，再次删除 3 获得 3 个点数，再次删除 3 获得 3 个点数。
总共获得 9 个点数。
 
提示：

1 <= nums.length <= 2 * 104
1 <= nums[i] <= 104

'''cpp
class Solution {
public:
    int deleteAndEarn(vector<int>& nums) {
        sort(ALL(nums));
        vector<pii> v;
        v.PB(MP(0, 0));
        const int n = SZ(nums);
        FOR(i, 0, n){
            int j = i;
            while (j + 1 < n && nums[j + 1] == nums[j]) j++;
            v.PB(MP(nums[j], j - i + 1));
            i = j;
        }
        
        VI f(SZ(v));
        f[1] = v[1].fi * v[1].se;

        FOR(i, 2, SZ(f)){
            if (v[i].fi == v[i - 1].fi + 1){
                f[i] = max(f[i - 1], f[i - 2] + v[i].fi * v[i].se);
            }else{
                f[i] = f[i - 1] + v[i].fi * v[i].se;
            }
        }
        return f.back();
    }
};
'''
