我们将给定的数组 A 分成 K 个相邻的非空子数组 ，我们的分数由每个子数组内的平均值的总和构成。计算我们所能得到的最大分数是多少。

注意我们必须使用 A 数组中的每一个数进行分组，并且分数不一定需要是整数。

示例:
输入: 
A = [9,1,2,3,9]
K = 3
输出: 20
解释: 
A 的最优分组是[9], [1, 2, 3], [9]. 得到的分数是 9 + (1 + 2 + 3) / 3 + 9 = 20.
我们也可以把 A 分成[9, 1], [2], [3, 9].
这样的分组得到的分数为 5 + 2 + 6 = 13, 但不是最大值.

说明:
1 <= A.length <= 100.
1 <= A[i] <= 10000.
1 <= K <= A.length.
答案误差在 10^-6 内被视为是正确的。

链接：https://leetcode-cn.com/problems/largest-sum-of-averages

//f[i][k]表示前i个数分成k组的最大平均值和
/*
class Solution {
public:
    double largestSumOfAverages(vector<int>& nums, int kk){
        const int n = nums.size();
        vector<vector<double>> f(n + 1, vector<double>(kk + 1));
        vector<int> preSum(n + 1);
        for (int i = 1; i <= n; ++ i){
            preSum[i] = preSum[i - 1] + nums[i - 1];
            f[i][1] = (double)preSum[i] / i;
        }
        f[1][1] = nums[0];
        for (int i = 2; i <= n; i ++){
            // for (int k = 2; k <= i && k <= kk; ++ k){
            for (int k = 2; k <= kk; ++ k){
                for (int j = 1; j < i; j ++){
                    f[i][k] = max(f[i][k], f[j][k - 1] + (double)(preSum[i] - preSum[j]) / (i - j));
                }
            }
        }
        return f[n][kk];
    }
};
*/