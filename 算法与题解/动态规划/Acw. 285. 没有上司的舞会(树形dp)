Ural 大学有 N 名职员，编号为 1∼N。

他们的关系就像一棵以校长为根的树，父节点就是子节点的直接上司。

每个职员有一个快乐指数，用整数 Hi 给出，其中 1≤i≤N。

现在要召开一场周年庆宴会，不过，没有职员愿意和直接上司一起参会。

在满足这个条件的前提下，主办方希望邀请一部分职员参会，使得所有参会职员的快乐指数总和最大，求这个最大值。

输入格式
第一行一个整数 N。

接下来 N 行，第 i 行表示 i 号职员的快乐指数 Hi。

接下来 N−1 行，每行输入一对整数 L,K，表示 K 是 L 的直接上司。

输出格式
输出最大的快乐指数。

数据范围
1≤N≤6000,
−128≤Hi≤127
输入样例：
7
1
1
1
1
1
1
1
1 3
2 3
6 4
7 4
4 5
3 5
输出样例：
5

//链式前向星
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 6001;
int to[MAXN], ne[MAXN], h[MAXN], cnt;     //链式前向星数据结构
int v[MAXN];      //是否有上司
int ha[MAXN];     //快乐值
int f[MAXN][2];   //dp数组
void add(int a, int b){
    to[cnt] = b, ne[cnt] = h[a], h[a] = cnt++;
}
void dfs(int m){
    f[m][1] += ha[m];
    for (int i = h[m]; i != -1; i = ne[i]){
        int y = to[i];
        dfs(y);
        f[m][1] += f[y][0];
        f[m][0] += max(f[y][1], f[y][0]);              //状态转移
    }
}
int main(){
    int n; cin >> n;
    for (int i = 1; i <= n; ++i){
        cin >> ha[i];
    }
    memset(h, -1, sizeof(h));
    
    for (int i = 1; i <= n - 1; ++i){
        int a, b;
        cin >> a >> b;
        add(b, a);
        v[a] = 1;
    }
    int boss;
    for (int i = 1; i <= n; ++i) if (!v[i]){ boss = i; break;}
    dfs(boss);
    cout << max(f[boss][0], f[boss][1]) << endl;
    return 0;
}



//solution 2.
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
void dfs(int m, vector<int> *son, vector<int>& h, vector<vector<int>>& dp){
    dp[m][1] += h[m];
    // dp[m][0] = 0;
    for (int i = 0; i < son[m].size(); ++i){
        int y = son[m][i];
        dfs(y, son, h, dp);
        dp[m][0] += max(dp[y][0], dp[y][1]);
        dp[m][1] += dp[y][0];
    }
}
int main(){
    int n; cin >> n;
    vector<int> h(n + 1);
    vector<bool> v(n + 1);
    for (int i = 1; i <= n; ++i){
        cin >> h[i];
    }
    vector<int> son[10000];
    int l, k;
    for (int i = 1; i < n; ++i){
        cin >> l >> k;
        son[k].push_back(l);
        v[l] = true;
    }
    int boss = 1;
    for (int i = 1; i <= n; ++i){
        // if (son[i].size() == 0){        //要找没有上司的，不是没有下属的
        if (!v[i]){
            boss = i;
            break;
        }
    }
    vector<vector<int>> dp(n + 1, vector<int>(2));
    dfs(boss, son, h, dp);
    cout << max(dp[boss][0], dp[boss][1]) << endl;
}