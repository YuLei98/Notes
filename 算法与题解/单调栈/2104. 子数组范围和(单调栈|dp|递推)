给你一个整数数组 nums 。nums 中，子数组的 范围 是子数组中最大元素和最小元素的差值。

返回 nums 中 所有 子数组范围的 和 。

子数组是数组中一个连续 非空 的元素序列。

 

示例 1：

输入：nums = [1,2,3]
输出：4
解释：nums 的 6 个子数组如下所示：
[1]，范围 = 最大 - 最小 = 1 - 1 = 0 
[2]，范围 = 2 - 2 = 0
[3]，范围 = 3 - 3 = 0
[1,2]，范围 = 2 - 1 = 1
[2,3]，范围 = 3 - 2 = 1
[1,2,3]，范围 = 3 - 1 = 2
所有范围的和是 0 + 0 + 0 + 1 + 1 + 2 = 4
示例 2：

输入：nums = [1,3,3]
输出：4
解释：nums 的 6 个子数组如下所示：
[1]，范围 = 最大 - 最小 = 1 - 1 = 0
[3]，范围 = 3 - 3 = 0
[3]，范围 = 3 - 3 = 0
[1,3]，范围 = 3 - 1 = 2
[3,3]，范围 = 3 - 3 = 0
[1,3,3]，范围 = 3 - 1 = 2
所有范围的和是 0 + 0 + 0 + 2 + 0 + 2 = 4
示例 3：

输入：nums = [4,-2,-3,4,1]
输出：59
解释：nums 中所有子数组范围的和是 59
 

提示：

1 <= nums.length <= 1000
-109 <= nums[i] <= 109
 

进阶：你可以设计一种时间复杂度为 O(n) 的解决方案吗？


/*
class Solution {
    public long subArrayRanges(int[] nums) {
        int n = nums.length;
        int[][][] f = new int[n][n][2];
        for (int i = 0; i < n; i++) f[i][i][0] = f[i][i][1] = nums[i];
        for (int len = 2; len <= n; len++) {
            for (int l = 0; l + len - 1 < n; l++) {
                int r = l + len - 1;
                f[l][r][0] = Math.min(nums[r], f[l][r - 1][0]);
                f[l][r][1] = Math.max(nums[r], f[l][r - 1][1]);
            }
        }
        long ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                ans += f[i][j][1] - f[i][j][0];
            }
        }
        return ans;
    }
}
*/

/*
class Solution {
    public long subArrayRanges(int[] nums) {
        int n = nums.length;
        long ans = 0;
        for (int i = 0; i < n; i++) {
            int min = nums[i], max = nums[i];
            for (int j = i + 1; j < n; j++) {
                min = Math.min(min, nums[j]);
                max = Math.max(max, nums[j]);
                ans += max - min;
            }
        }
        return ans;
    }
}
*/

/*
class Solution {
public:
    long long subArrayRanges(vector<int>& nums) {
        const int n = nums.size();
        stack<int> minStack, maxStack;
        vector<int> minleft(n), minright(n), maxleft(n), maxright(n);
        for (int i = 0; i < n; ++ i) {
            while (!minStack.empty() and nums[minStack.top()] >= nums[i])         // 注意4个while的条件，为什么？
                minStack.pop();
            minleft[i] = minStack.empty() ? -1 : minStack.top();
            minStack.push(i);
            while (!maxStack.empty() and nums[maxStack.top()] <= nums[i])
                maxStack.pop();
            maxleft[i] = maxStack.empty() ? -1 : maxStack.top();
            maxStack.push(i);
        }
        minStack = stack<int>();
        maxStack = stack<int>();
        for (int i = n - 1; ~i; -- i) {
            while (!minStack.empty() and nums[minStack.top()] > nums[i])
                minStack.pop();
            minright[i] = minStack.empty() ? n : minStack.top();
            minStack.push(i);
            while (!maxStack.empty() and nums[maxStack.top()] < nums[i])
                maxStack.pop();
            maxright[i] = maxStack.empty() ? n : maxStack.top();
            maxStack.push(i);
        }
        long long ans = 0;
        for (int i = 0; i < n; ++ i) {
            ans += static_cast<long long>(maxright[i] - i) * (i - maxleft[i]) * nums[i];
            ans -= static_cast<long long>(minright[i] - i) * (i - minleft[i]) * nums[i];
        }
        return ans;
    }
};
*/