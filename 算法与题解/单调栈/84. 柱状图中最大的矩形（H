给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。

求在该柱状图中，能够勾勒出来的矩形的最大面积。

示例:

输入: [2,1,5,6,2,3]
输出: 10

/*
  思路：用单调栈辅助记录i左右两边第一个小于height[i]的位置
*/

'''cpp 
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        const int n = SZ(heights);
        stack<int> st;
        VI left(n), right(n);

        FOR (i, 0, n){
            while (!st.empty() && heights[st.top()] >= heights[i]) st.pop();
            left[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }
        st = stack<int>();
        EOR (i, n - 1, -1){
            while (!st.empty() && heights[st.top()] >= heights[i]) st.pop();
            right[i] = st.empty() ? n : st.top();
            st.push(i);
        }
        int res = 0;
        FOR (i, 0, n)
            res = max(res, (right[i] - left[i] - 1) * heights[i]);
        return res;
    }
};
'''


'''cpp 上面的改版，在出栈的同时更新right数组
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        vector<int> left(n), right(n, n);
        
        stack<int> mono_stack;
        for (int i = 0; i < n; ++i) {
            while (!mono_stack.empty() && heights[mono_stack.top()] >= heights[i]) {
                right[mono_stack.top()] = i;
                mono_stack.pop();
            }
            left[i] = (mono_stack.empty() ? -1 : mono_stack.top());
            mono_stack.push(i);
        }
        
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = max(ans, (right[i] - left[i] - 1) * heights[i]);
        }
        return ans;
    }
};
'''
