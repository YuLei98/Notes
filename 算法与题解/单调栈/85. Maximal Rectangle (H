给定一个仅包含 0 和 1 、大小为 rows x cols 的二维二进制矩阵，找出只包含 1 的最大矩形，并返回其面积。

Example 1:
输入：matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
输出：6

The answer of question 84 can be reused.


class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        vector<int> l(n), r(n);
        stack<int> sl, sr;
        for (int i = 0; i < n; ++i){
            while (!sl.empty() && heights[sl.top()] >= heights[i]) sl.pop();
            l[i] = sl.empty()? -1: sl.top();
            sl.push(i);
            while (!sr.empty() && heights[sr.top()] >= heights[n - 1 - i]) sr.pop();
            r[n - i - 1] = sr.empty()? n: sr.top();
            sr.push(n - 1 - i);
        }
        
        int res = 0;
        for (int i = 0; i < n; ++i){
            //cout << l[i] << " " << r[i] << endl;
            res = max(res, heights[i] * (r[i] - l[i] - 1));
        }
        return res;
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
        if (matrix.empty()) return 0;
        int m = matrix.size(), n = matrix[0].size();
        vector<vector<int>> heights(m + 1, vector<int>(n));
        for (int i = 0; i < m; ++i){
            for (int j = 0; j < n; ++j){
                heights[i + 1][j] = matrix[i][j] == '1'? 1 + heights[i][j]: 0;
                //cout << heights[i + 1][j] << " ";
            }
            //cout << endl;
        }

        int res = 0;
        for (int i = 1; i <= m; ++i){
            res = max(res, largestRectangleArea(heights[i]));
        }
        return res;
    }
};