给定一个字符串 s 和一些 长度相同 的单词 words 。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。

注意子串要与 words 中的单词完全匹配，中间不能有其他字符 ，但不需要考虑 words 中单词串联的顺序。

 

示例 1：

输入：s = "barfoothefoobarman", words = ["foo","bar"]
输出：[0,9]
解释：
从索引 0 和 9 开始的子串分别是 "barfoo" 和 "foobar" 。
输出的顺序不重要, [9,0] 也是有效答案。
示例 2：

输入：s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]
输出：[]
示例 3：

输入：s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]
输出：[6,9,12]
 

提示：

1 <= s.length <= 104
s 由小写英文字母组成
1 <= words.length <= 5000
1 <= words[i].length <= 30
words[i] 由小写英文字母组成

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



/*
class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        const int n = s.length(), m = words.size(), wordsize = words.front().length();
        unordered_map<string, int> mp;
        for (auto &word : words) mp[word] ++;
        vector<int> ans;

        // Sol 1:
        // for (int i = 0; i <= n - m * wordsize; ++ i) {
        //     bool ok = true;
        //     unordered_map<string, int> cnt;
        //     for (int j = 0; j < m * wordsize;) {
        //         string word = s.substr(i + j, wordsize);
        //         if (!mp.count(word) or ++ cnt[word] > mp[word]) {
        //             ok = false;
        //             break;
        //         }
        //         j += wordsize;
        //     }
        //     if (ok) ans.push_back(i);
        // }

        // Sol 2, 优化, 分组 + 滑动窗口
        for (int i = 0; i < wordsize; ++ i) {
            unordered_map<string, int> cnt;
            int start = i;
            for (int j = i; j < n; j += wordsize) {
                string word = s.substr(j, wordsize);
                if (!mp.count(word)) {
                    cnt.clear();
                    start = j + wordsize;
                } else {
                    cnt[word] += 1;
                    while (cnt[word] > mp[word]) {
                        cnt[s.substr(start, wordsize)] --;
                        start += wordsize;
                    } 
                    if (j - start == (m - 1) * wordsize) ans.push_back(start);
                }
            }
        }
        return ans;
    }
};
*/