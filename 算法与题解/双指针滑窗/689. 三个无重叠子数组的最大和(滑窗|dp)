给你一个整数数组 nums 和一个整数 k ，找出三个长度为 k 、互不重叠、且 3 * k 项的和最大的子数组，并返回这三个子数组。

以下标的数组形式返回结果，数组中的每一项分别指示每个子数组的起始位置（下标从 0 开始）。如果有多个结果，返回字典序最小的一个。

 

示例 1：
输入：nums = [1,2,1,2,6,7,5,1], k = 2
输出：[0,3,5]
解释：子数组 [1, 2], [2, 6], [7, 5] 对应的起始下标为 [0, 3, 5]。
也可以取 [2, 1], 但是结果 [1, 3, 5] 在字典序上更大。

示例 2：
输入：nums = [1,2,1,2,1,2,1,2,1], k = 2
输出：[0,2,4]
 
提示：
1 <= nums.length <= 2 * 104
1 <= nums[i] < 216
1 <= k <= floor(nums.length / 3)

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-sum-of-3-non-overlapping-subarrays
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/*
要计算三个无重叠子数组的最大和，我们可以枚举第三个子数组的位置，同时维护前两个无重叠子数组的最大和及其位置。

要计算两个无重叠子数组的最大和，我们可以枚举第二个子数组的位置，同时维护第一个子数组的最大和及其位置。

因此，我们首先来解决单个子数组的最大和问题，然后解决两个无重叠子数组的最大和问题，最后解决三个无重叠子数组的最大和问题。

作者：LeetCode-Solution
链接：https://leetcode-cn.com/problems/maximum-sum-of-3-non-overlapping-subarrays/solution/san-ge-wu-zhong-die-zi-shu-zu-de-zui-da-4a8lb/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
*/

'''python3
class Solution:
    def maxSumOfThreeSubarrays(self, nums: List[int], k: int) -> List[int]:
        ans = []
        sum1, maxSum1, maxSum1Idx = 0, 0, 0
        sum2, maxSum12, maxSum12Idx = 0, 0, ()
        sum3, maxTotal = 0, 0
        for i in range(k * 2, len(nums)):
            sum1 += nums[i - k * 2]
            sum2 += nums[i - k]
            sum3 += nums[i]
            if i >= k * 3 - 1:
                if sum1 > maxSum1:
                    maxSum1 = sum1
                    maxSum1Idx = i - k * 3 + 1
                if maxSum1 + sum2 > maxSum12:
                    maxSum12 = maxSum1 + sum2
                    maxSum12Idx = (maxSum1Idx, i - k * 2 + 1)
                if maxSum12 + sum3 > maxTotal:
                    maxTotal = maxSum12 + sum3
                    # ans = [*maxSum12Idx, i - k + 1]
                    ans = list(maxSum12Idx) + [i - k + 1]
                sum1 -= nums[i - k * 3 + 1]
                sum2 -= nums[i - k * 2 + 1]
                sum3 -= nums[i - k + 1]
        return ans
'''



//也可用动态规划
/*
class Solution:
    def maxSumOfThreeSubarrays(self, nums: List[int], k: int) -> List[int]:
        le = len(nums)
        preSum = [0]
        for i in range(0, le):
            preSum.append(preSum[-1] + nums[i])
        # print(preSum)
        f = [[0] * 3 for i in range(le + 1)]
        for i in range(k, le + 1):
            f[i][0] = max(f[i - 1][0], preSum[i] - preSum[i - k])
            # if i >= 2 * k:
            f[i][1] = max(f[i - 1][1], preSum[i] - preSum[i - k] + f[i - k][0])
            # if i >= 3 * k:
            f[i][2] = max(f[i - 1][2], preSum[i] - preSum[i - k] + f[i - k][1])

        /*ans = []
        i = le
        while True:
            if f[i][2] == f[i - 1][2]:
                i -= 1
            else:
                ans.append(i - k)
                break
        i -= k
        while True:
            if f[i][1] == f[i - 1][1]:
                i -= 1
            else:
                ans.append(i - k)
                break
        i -= k
        while True:
            if f[i][0] == f[i - 1][0]:
                i -= 1
            else:
                ans.append(i - k)
                break
        return ans[::-1]*/


		//简洁一些
		ans = [-1] * 3
        i = le; j = 2
        while j >= 0:
            if f[i][j] == f[i - 1][j]:
                i -= 1
            else:
                ans[j] = i - k
                i -= k
                j -= 1
        return ans
*/
