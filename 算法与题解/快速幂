//算法
//快速幂
double myPow(double x, int n){        
    auto quickMul = [](double x, long long N) {
        double ans = 1.0;   // 贡献的初始值为 x
        double x_contribute = x;  // 在对 N 进行二进制拆分的同时计算答案
        
        while (N > 0) {
            if (N % 2 == 1) {   // 如果 N 二进制表示的最低位为 1，那么需要计入贡献
                ans *= x_contribute;
            }
            x_contribute *= x_contribute;   // 将贡献不断地平方
            N /= 2;     // 舍弃 N 二进制表示的最低位，这样我们每次只要判断最低位即可
        }
        return ans;
    };
    long long N = n;
    return N >= 0 ? quickMul(x, N) : 1.0 / quickMul(x, -N);
}


//BLOG:  https://blog.csdn.net/qq_19782019/article/details/85621386
/*
    long long fastPower(long long base, long long power) {
    long long result = 1;
    while (power > 0) {
        if (power % 2 == 0) {
            //如果指数为偶数
            power = power / 2;//把指数缩小为一半
            base = base * base % 1000;//底数变大成原来的平方
        } else {
            //如果指数为奇数
            power = power - 1;//把指数减去1，使其变成一个偶数
            result = result * base % 1000;//此时记得要把指数为奇数时分离出来的底数的一次方收集好
            power = power / 2;//此时指数为偶数，可以继续执行操作
            base = base * base % 1000;
        }
    }
    return result;
}
*/


//优化
/*
    long long fastPower(long long base, long long power) {
    long long result = 1;
    while (power > 0) {
        if (power % 2 == 1) {
            result = result * base % 1000;
        }
        power = power / 2;
        base = (base * base) % 1000;
    }
    return result;
}
*/
