You are given a circular array of size NN and an integer KK. On this array, you can perform operations of incrementing or decrementing an element. The cost of such an operation is 11. You can perform more than one operation on a single element.

You want each subarray of length KK to have the same sum of elements. Compute the minimum cost needed to achieve this.

Standard input
The first line contains two integer values NN and KK.

The second line contains NN integers, the values of the array.

Standard output
The output should contain a single integer value representing the minimum cost needed.

Constraints and notes
1≤N≤10^5
1≤K≤N
The values of the array are between −10 000 and 10 000
The array is circular, so there are always exactly NN subarrays of length KK.
Input	                        Output
10 1
1 2 3 4 5 6 7 8 9 10             25
10 2
1 6 2 7 3 8 4 9 5 10             12
9 3
1 4 7 2 5 8 3 6 9                6
10 10
1 2 3 4 5 6 7 8 9 10             0

//思路：考虑v[i], v[i + 1] .... v[i + k]连续k + 1个数，相邻k个数的和相等，则有v[i], v[i + k]。
/*
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int main(){
    int n, k; cin >> n >> k;
    vector<int> v(n);
    for (int i = 0 ; i < n; ++ i){
        cin >> v[i];
    }
    int ans = 0;
    vector<bool> vis(n);
    for (int i = 0; i < n; ++ i){
        vector<int> vals;
        int now = i;
        while (!vis[now]){
            vis[now] = true;
            vals.emplace_back(v[now]);
            now = (now + k) % n;
        }
        int sz = vals.size();
        sort(vals.begin(), vals.end());
        for (auto x: vals){
            ans += abs(x - vals[sz / 2]);
        }
    }
    cout << ans << endl;
    return 0;
}
*/