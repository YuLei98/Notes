给你一份航线列表 tickets ，其中 tickets[i] = [fromi, toi] 表示飞机出发和降落的机场地点。请你对该行程进行重新规划排序。

所有这些机票都属于一个从 JFK（肯尼迪国际机场）出发的先生，所以该行程必须从 JFK 开始。如果存在多种有效的行程，请你按字典排序返回最小的行程组合。

例如，行程 ["JFK", "LGA"] 与 ["JFK", "LGB"] 相比就更小，排序更靠前。
假定所有机票至少存在一种合理的行程。且所有的机票 必须都用一次 且 只能用一次。

示例 1：
输入：tickets = [["MUC","LHR"],["JFK","MUC"],["SFO","SJC"],["LHR","SFO"]]
输出：["JFK","MUC","LHR","SFO","SJC"]

示例 2：
输入：tickets = [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
输出：["JFK","ATL","JFK","SFO","ATL","SFO"]
解释：另一种有效的行程是 ["JFK","SFO","ATL","JFK","ATL","SFO"] ，但是它字典排序更大更靠后。
 

提示：
1 <= tickets.length <= 300
tickets[i].length == 2
fromi.length == 3
toi.length == 3
fromi 和 toi 由大写英文字母组成
fromi != toi

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/reconstruct-itinerary
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


//https://leetcode-cn.com/problems/reconstruct-itinerary/solution/gua-he-xin-shou-de-shi-pin-jiang-jie-by-sheldonx-5/
//Hierholzer算法
/*	
	从起点出发，进行深度优先搜索。

	每次沿着某条边从某个顶点移动到另外一个顶点的时候，都需要删除这条边。

	如果没有可移动的路径，则将所在节点加入到栈中，并返回。
*/

'''python
class Solution:
    def findItinerary(self, tickets: List[List[str]]) -> List[str]:
        path = defaultdict(list)
        for t in tickets:
            path[t[0]].append(t[1])
        for _ in path.keys():
            path[_].sort()
        ans = []
        def dfs(node):
            while path[node]:
                dfs(path[node].pop(0))
            ans.append(node)
        dfs('JFK')
        return ans[::-1]
'''