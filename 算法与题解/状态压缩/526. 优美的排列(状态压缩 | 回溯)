
假设有从 1 到 N 的 N 个整数，如果从这 N 个数字中成功构造出一个数组，使得数组的第 i 位 (1 <= i <= N) 满足如下两个条件中的一个，我们就称这个数组为一个优美的排列。条件：

第 i 位的数字能被 i 整除
i 能被第 i 位上的数字整除
现在给定一个整数 N，请问可以构造多少个优美的排列？

示例1:

输入: 2
输出: 2
解释: 

第 1 个优美的排列是 [1, 2]:
  第 1 个位置（i=1）上的数字是1，1能被 i（i=1）整除
  第 2 个位置（i=2）上的数字是2，2能被 i（i=2）整除

第 2 个优美的排列是 [2, 1]:
  第 1 个位置（i=1）上的数字是2，2能被 i（i=1）整除
  第 2 个位置（i=2）上的数字是1，i（i=2）能被 1 整除
说明:

N 是一个正整数，并且不会超过15

//状态压缩
class Solution {
public:
    int countArrangement(int n) {
        vector<int> dp(1 << n);
		dp[0] = 1;   
        for (int k = 0; k < (1 << n) - 1; k++) {  //既代表哪几个数被使用过了，其中1的个数i又代表1至i的下标被填充过了， k为（1 << n) - 1时说明所有数都使用过了，循环中可以不包括
            int i = __builtin_popcount(k) + 1; //下标是从小到大填充, k中有i个1就代表下个填充的位置是i + 1
            for (int j = 1; j <= n; j++) { //每个数都试一次
                if (k & (1 << (j - 1))) continue; //这个数使用过了
                if (i % j == 0 || j % i == 0) dp[k | (1 << (j - 1))] += dp[k]; //，没使用过，且满足条件
            }
        }
        return dp[(1 << n) - 1];
    }
};


//回溯
class Solution {
public:
    int n, res;
    void backtrack(int cur, vector<int> v){
        if (cur > n) {
            ++ res;
            return;
        }
        for (int i = 1; i <= n; ++ i){
            if (!v[i] && (i % cur == 0 || cur % i == 0)){
                v[i] = true;
                backtrack(cur + 1, v);
                v[i] = false;
            }
        }
    }
    int countArrangement(int _n) {
        n = _n, res = 0;
        vector<int> v(n + 1);
        backtrack(1, v);
        return res;
    }
};