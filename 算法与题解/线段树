#include <iostream>
#include <cstdio>
#define MAXN 1000001
#define ll long long
using namespace std;
unsigned ll a[MAXN], sum[MAXN << 2], tag[MAXN << 2];
inline ll lc(ll x)
{
    return x << 1;
}
inline ll rc(ll x)
{
    return x << 1 | 1;
}
inline void push_up(ll rt)
{
    sum[rt] = sum[lc(rt)] + sum[rc(rt)];
}
void build(ll rt, ll l, ll r)
{
    tag[rt] = 0;
    if (l == r)
    {
        sum[rt] = a[l];
        return;
    }
    ll mid = (l + r) >> 1;
    build(lc(rt), l, mid);
    build(rc(rt), mid + 1, r);
    push_up(rt);
}
// inline void f(ll rt, ll l, ll r, ll val)         //也可定义一个函数
// {
//     tag[rt] = tag[rt] + val;
//     sum[rt] = sum[rt] + val * (r - l + 1);
// }
inline void push_down(ll rt, ll l, ll r)
{
    ll mid = (l + r) >> 1;
    // f(lc(rt), l, mid, tag[rt]);
    // f(rc(rt), mid + 1, r, tag[rt]);
    tag[lc(rt)] += tag[rt];
    tag[rc(rt)] += tag[rt];

    sum[lc(rt)] += tag[rt] * (mid - l + 1);
    sum[rc(rt)] += tag[rt] * (r - mid);
    tag[rt] = 0;
}
inline void update(ll rt, ll l, ll r, ll L, ll R, ll val)         //L, R为要操作的区间
{
    if (L <= l && r <= R)
    {
        sum[rt] += val * (r - l + 1);
        tag[rt] += val;
        return;
    }
    push_down(rt, l, r);
    ll mid = (l + r) >> 1;
    if (L <= mid)
        update(lc(rt), l, mid, L, R, val);
    if (R > mid)
        update(rc(rt), mid + 1, r, L, R, val);
    push_up(rt);
}
ll query(ll rt, ll l, ll r, ll L, ll R)            //L, R为要操作的区间
{
    ll res = 0;
    if (L <= l && r <= R)
        return sum[rt];
    ll mid = (l + r) >> 1;
    push_down(rt, l, r);
    if (L <= mid)
        res += query(lc(rt), l, mid, L, R);
    if (R > mid)
        res += query(rc(rt), mid + 1, r, L, R);
    return res;
}
int main()
{   ll n, m;
    ll a1, b, c, val, e, f;
    cin >> n >> m;
    for (ll i = 1; i <= n; i++)
        scanf("%lld", &a[i]);

    build(1, 1, n);

    while (m--)
    {
        scanf("%lld", &a1);
        switch (a1)
        {
        case 1:
        {
            scanf("%lld%lld%lld", &b, &c, &val);
            update(1, 1, n, b, c, val);
            break;
        }
        case 2:
        {
            scanf("%lld%lld", &e, &f);
            printf("%lld\n", query(1, 1, n, e, f));
            break;
        }
        }
    }
    return 0;
}