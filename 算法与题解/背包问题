//题源AcWing https://www.acwing.com/problem/
一、0-1背包
  有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。

  第 i 件物品的体积是 vi，价值是 wi。
  
  求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。
  
  Solution : 
  '''

      //1d
      vector<int> W(N), V(N);
      for(int i = 0; i < N; i++){
          cin >> W[i] >> V[i];
      }
      vector<int> f(M + 1);
      for(int i = 0; i < N; i++){
          for(int j = M; j >= W[i]; j--){           //从后往前
          //for(int j = W[i]; j <= M; ++j){        //从前往后，完全背包
              f[j] = max(f[j], f[j - W[i]] + V[i]); 
              cout << f[j] << " ";
          }
          cout << endl;
      }
      cout << f[M];
    
    
      //2d
      /*vector<int> W(N + 1), V(N + 1);
      for(int i = 1; i <= N; i++){
          cin >> W[i] >> V[i];
      }
      vector<vector<int>> dp(N + 1, vector<int>(M + 1));
      for(int i = 1; i <= N; i++){
          //for(int j = 1; j <= M; j++){      //从前往后从后往前都可以
          for(int j = M; j >= 0; --j){
              if (j < W[i]) dp[i][j] = dp[i - 1][j];
              else dp[i][j] = max(dp[i - 1][j - W[i]] + V[i], dp[i - 1][j]);
          }
      }
      cout << dp[N][M];*/
      
    '''
二、完全背包
  有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。
  第 i 种物品的体积是 vi，价值是 wi。
  求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。
  输出最大价值。

  输入格式
  第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。

  接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 种物品的体积和价值。

  输出格式
  输出一个整数，表示最大价值。

  数据范围
  0<N,V≤1000
  0<vi,wi≤1000
  
  Solution :
      //1d
      vector<int> f(M + 1);
      for (int i = 1; i <= N; ++i){
          //for (int j = 0; j <= M; ++j){
              //if (j >= W[i])
          for (int j = W[i]; j <= M; ++j){
                  f[j] = max(f[j], f[j - W[i]] + V[i]);
          }
      }
      cout << f[M];
      
      
      //2d
      /*vector<vector<int>> dp(N + 1, vector<int>(M + 1));
      for(int i = 1; i <= N; i++){
          //for(int j = W[i]; j <= M; j++){       //不能从W[i]开始   反例：20 200     //为什么？
                                                                           24 50
                                                                           42 60
                                                                           20 49
                                                                           7 15
                                                                           48 115
                                                                           4 11
                                                                           3 8
                                                                           7 5
                                                                           52 66
                                                                           50 25
                                                                           5 8
                                                                           9 25
                                                                           14 40
                                                                           9 22
                                                                           55 42
                                                                           40 30
                                                                           35 49
                                                                           33 16
                                                                           12 12
                                                                           65 127     //输出570，答案571
          //for(int j = M; j >= 0; --j){         //不能从后往前
          for (int j = 0; j <= M; ++j){
              if (j < W[i]) dp[i][j] = dp[i - 1][j];
              else 
                  //dp[i][j] = max(dp[i - 1][j - W[i]] + V[i], dp[i - 1][j]);     //01背包     注意i的区别
                  dp[i][j] = max(dp[i][j - W[i]] + V[i], dp[i - 1][j]);         //完全背包
          }
      }
      cout << dp[N][M];*/

三、多重背包
    有 N 种物品和一个容量是 V 的背包。

    第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。

    求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。
    输出最大价值。

    输入格式
    第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。

    接下来有 N 行，每行三个整数 vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。

    输出格式
    输出一个整数，表示最大价值。
    
    数据范围
    0<N,V≤100
    0<vi,wi,si≤100
    
    //思路：将每种背包分解成二进制组合，让这些二进制可以组合成任意数量的背包，如13 = 001 + 010 + 100 + 6, 题目就转化成了0-1背包

    '''
    #include <iostream>
    #include <vector>
    using namespace std;
    int main(){
    int NN, M;
        cin >> NN >> M;
        int v, w, s;
        vector<int> W(1), V(1);
        W.reserve(1000);V.reserve(1000);
        for (int i = 0; i < NN; ++i){
            cin >> v >> w >> s;
            for (int j = 0; j < 7; ++j){
                if (s <= 1 << j){
                    W.push_back(w * s);
                    V.push_back(v * s);
                    break;
                }else{
                    W.push_back(w * (1 << j));
                    V.push_back(v * (1 << j));
                    s -= 1 << j;
                    //if (!s) break;          //上一个if-else用<=，这里可以不用
                }
            }
        }
        int N = W.size();
    
        vector<vector<int>> dp(N , vector<int>(M + 1));             //数据量大用1D数组
        for (int i = 1; i < N; i++){
            for (int j = 0; j <= M; j++){
                if (j < W[i]) dp[i][j] = dp[i - 1][j];
                else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - W[i]] + V[i]);
                cout << dp[i][j] << " ";
            }
            cout << endl;
        }
        cout << dp[N - 1][M];
        return 0;
    }
    '''
    
    数据量特别大，用单调队列优化
    
四、混合背包 
    有 N 种物品和一个容量是 V 的背包。
    物品一共有三类：
    第一类物品只能用1次（01背包）；
    第二类物品可以用无限次（完全背包）；
    第三类物品最多只能用 si 次（多重背包）；
    每种体积是 vi，价值是 wi。

    求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。
    输出最大价值。

    输入格式
    第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。

    接下来有 N 行，每行三个整数 vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。

    si=−1 表示第 i 种物品只能用1次；
    si=0 表示第 i 种物品可以用无限次；
    si>0 表示第 i 种物品可以使用 si 次；
    输出格式
    输出一个整数，表示最大价值。

    数据范围
    0<N,V≤1000
    0<vi,wi≤1000
    −1≤si≤1000
    输入样例
    4 5
    1 2 -1
    2 4 1
    3 4 0
    4 5 2
    输出样例：
    8
    思路：将多重背包转化为0-1背包问题，整个问题变成0-1背包和完全背包的结合。
    '''cpp  //B.M
    int main() {
      int N, V;
      cin >> N >> V;
      vector<int> w1, w2, v1, v2;
      int w, v, s;
      for (int i = 0; i < N; i++) {          //还可以每输入一个物品数据，就决策一次动规数组
        cin >> v >> w >> s;
        if (s == -1) {
          w1.push_back(v);
          v1.push_back(w);
        }
        else if (!s) {
          w2.push_back(v);
          v2.push_back(w);
        }
        else {
          int j = 1;
          while (s > j) {
            w1.push_back(j*v);
            v1.push_back(j*w);
            s -= j;
            j <<= 1;
          }
          w1.push_back(v*s);
          v1.push_back(w*s);
        }
      }
      vector<int> f(1001);
      for (int i = 0, n = w1.size(); i < n; ++i) {
        for (int j = V; j >= w1[i]; --j) {
          f[j] = max(f[j - w1[i]] + v1[i], f[j]);
        }
      }
      for (int i = 0, n = w2.size(); i < n; ++i) {
        for (int j = 1; j <= V; ++j) {
                if(j >= w2[i])
            f[j] = max(f[j], f[j - w2[i]] + v2[i]);
        }
      }
      cout << f[V];
      return 0;
    }
    '''
    
    '''cpp //B.O
    for (int i = 0; i < n; i++) {
        scanf("%d %d %d", &v, &w, &s);
        if (s != 0) {            // 是多重背包 / 01背包（多重背包特殊情况）
            if (s == -1)
                s = 1;           // 多重背包特殊情况 s = 1
            int num = min(s, m / v);   //节省1
            for (int k = 1; num > 0; k <<= 1) {  // <<=是左移操作
                if (k > num)
                    k = num;   // 注意这里和for循环的结束条件，可以减少代码量
                num -= k;
                for (int j = m; j >= v * k; j--) {       //从大到小枚举
                    f[j] = max(f[j], f[j - v * k] + w * k);
                }
            }
        }
        else {           // 完全背包，需要从小到大枚举
            for (int j = v; j <= m; j++) {
                f[j] = max(f[j], f[j - v] + w);
            }
        }

    }
    printf("%d\n", f[m]);
    '''

五、二维背包
   有 N 件物品和一个容量是 V 的背包，背包能承受的最大重量是 M。

   每件物品只能用一次。体积是 vi，重量是 mi，价值是 wi。

   求解将哪些物品装入背包，可使物品总体积不超过背包容量，总重量不超过背包可承受的最大重量，且价值总和最大。
   输出最大价值。
   
   输入格式
   第一行两个整数，N，V,M，用空格隔开，分别表示物品件数、背包容积和背包可承受的最大重量。

   接下来有 N 行，每行三个整数 vi,mi,wi，用空格隔开，分别表示第 i 件物品的体积、重量和价值。

   输出格式
   输出一个整数，表示最大价值。

   数据范围
   0<N≤1000
   0<V,M≤100
   0<vi,mi≤100
   0<wi≤1000
   输入样例
   4 5 6
   1 2 3
   2 4 4
   3 4 5
   4 5 6
   输出样例：
   8  
   
   '''cpp
   #include<bits/stdc++.h>
   using namespace std;
   int main(){
       int N, V, M;
       cin >> N >> V >> M;
       int v, m, w;
       int dp[101][101] = {0};
       while(N--){
           cin >> v >> m >> w;
           for (int i = V; i >= v; --i){
               for (int j = M; j >= m; --j){
                   dp[i][j] = max(dp[i][j], dp[i - v][j - m] + w);        //
               }
           }
       }
       cout << dp[V][M] << endl;
       return 0;
   }
   '''
六、分组背包
    有 N 组物品和一个容量是 V 的背包。

    每组物品有若干个，同一组内的物品最多只能选一个。
    每件物品的体积是 vij，价值是 wij，其中 i 是组号，j 是组内编号。

    求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。

    输出最大价值。

    输入格式
    第一行有两个整数 N，V，用空格隔开，分别表示物品组数和背包容量。

    接下来有 N 组数据：

    每组数据第一行有一个整数 Si，表示第 i 个物品组的物品数量；
    每组数据接下来有 Si 行，每行有两个整数 vij,wij，用空格隔开，分别表示第 i 个物品组的第 j 个物品的体积和价值；
    输出格式
    输出一个整数，表示最大价值。

    数据范围
    0<N,V≤100
    0<Si≤100
    0<vij,wij≤100
    输入样例
    3 5
    2
    1 2
    2 4
    1
    3 4
    1
    4 5
    输出样例：
    8
    
    '''cpp                        //f[i][j]表示i组体积为j时的最优解
    for(int i=1;i<=N;i++){
        for(int j=0;j<=V;j++){
            f[i][j]=f[i-1][j];  //不选
            for(int k=0;k<s[i];k++){
                if(j>=w[i][k])     
                    f[i][j]=max(f[i][j],f[i-1][j-w[i][k]]+v[i][k]);  
            }
        }
    }
    '''
    
    '''cpp                  //1D优化
    FOR(i, 1, N + 1){
        //FOR(j, 0, V + 1){                     
        for (int j = V; j > 0; --j){                  //反向，不然会出现同一个物品选了多次的情况
            FOR(k, 0, s[i]){
                if (j >= w[i][k]){
                    f[j] = max(f[j], f[j - w[i][k]] + v[i][k]);
                }
            }
        }
    }
    '''

七、背包问题求方案数
    有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。

    第 i 件物品的体积是 vi，价值是 wi。

    求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。

    输出 最优选法的方案数。注意答案可能很大，请输出答案模 109+7 的结果。

    输入格式
    第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。

    接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。

    输出格式
    输出一个整数，表示 方案数 模 109+7 的结果。

    数据范围
    0<N,V≤1000
    0<vi,wi≤1000
    输入样例
    4 5
    1 2
    2 4
    3 4
    4 6
    输出样例：
    2
    
    '''cpp
    int main()
    {
        int N, V;
        cin >> N >> V;
        vector<int> f(V + 1), g(V + 1, 1);
        int v, w;
        for (int i = 0; i < N; i ++ ){
            cin >> v >> w;
            for (int j = V; j >= v; j --){
                int value = f[j - v] + w;
                if (f[j] == value) {
                    g[j] += g[j - v];
                    g[j] %= MOD;
                }
                else if (f[j] < value) g[j] = g[j - v];
                f[j] = max(f[j], value);
            }
        }
        cout << g[V];
        return 0;
    }
    '''
