namespace pp {

struct Point {
  int x, y;
  Point(int x_, int y_): x(x_), y(y_) {}
};

// Given three collinear points p, q, r, the function checks if
// point q lies on line segment 'pr'
bool onSegment(Point p, Point q, Point r) {
  if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) && q.y <= max(p.y, r.y) &&
      q.y >= min(p.y, r.y))
    return true;

  return false;
}

// To find orientation of ordered triplet (p, q, r).
// The function returns following values
// 0 --> p, q and r are collinear
// 1 --> Clockwise
// 2 --> Counterclockwise
int orientation(Point p, Point q, Point r) {
  // See https://www.geeksforgeeks.org/orientation-3-ordered-points/
  // for details of below formula.
  long long val = 1LL * (q.y - p.y) * (r.x - q.x) - 1LL * (q.x - p.x) * (r.y - q.y);

  if (val == 0)
    return 0; // collinear

  return (val > 0) ? 1 : 2; // clock or counterclock wise
}

// The main function that returns true if line segment 'p1q1'
// and 'p2q2' intersect.
bool doIntersect(Point p1, Point q1, Point p2, Point q2) {
  // Find the four orientations needed for general and
  // special cases
  int o1 = orientation(p1, q1, p2);
  int o2 = orientation(p1, q1, q2);
  int o3 = orientation(p2, q2, p1);
  int o4 = orientation(p2, q2, q1);

  // General case
  if (o1 != o2 && o3 != o4)
    return true;

  // Special Cases
  // p1, q1 and p2 are collinear and p2 lies on segment p1q1
  if (o1 == 0 && onSegment(p1, p2, q1))
    return true;

  // p1, q1 and q2 are collinear and q2 lies on segment p1q1
  if (o2 == 0 && onSegment(p1, q2, q1))
    return true;

  // p2, q2 and p1 are collinear and p1 lies on segment p2q2
  if (o3 == 0 && onSegment(p2, p1, q2))
    return true;

  // p2, q2 and q1 are collinear and q1 lies on segment p2q2
  if (o4 == 0 && onSegment(p2, q1, q2))
    return true;

  return false; // Doesn't fall in any of the above cases
}

} // namespace pp

namespace pc {
using Point = std::pair<long double, long double>;
long double eps = 1e-12;

std::ostream &operator<<(std::ostream &os, const Point &p) {
  auto x = p.first;
  if (x == 0.0) {
    x = 0.0;
  }
  auto y = p.second;
  if (y == 0.0) {
    y = 0.0;
  }
  return os << '(' << x << ", " << y << ')';
}

template <typename T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
  auto itr = v.cbegin();
  auto end = v.cend();

  os << '[';
  if (itr != end) {
    os << *itr;
    itr = std::next(itr);
  }
  while (itr != end) {
    os << ", " << *itr;
    itr = std::next(itr);
  }
  return os << ']';
}

long double sq(long double x) { return x * x; }

std::vector<Point> intersects(const Point &p1, const Point &p2, const Point &cp,
                              double r, bool segment) {
  std::vector<Point> res;
  auto x0 = cp.first;
  auto y0 = cp.second;
  auto x1 = p1.first;
  auto y1 = p1.second;
  auto x2 = p2.first;
  auto y2 = p2.second;
  auto A = y2 - y1;
  auto B = x1 - x2;
  auto C = x2 * y1 - x1 * y2;
  auto a = sq(A) + sq(B);
  double b, c;
  bool bnz = true;
  if (abs(B) >= eps) {
    b = 2 * (A * C + A * B * y0 - sq(B) * x0);
    c = sq(C) + 2 * B * C * y0 - sq(B) * (sq(r) - sq(x0) - sq(y0));
  } else {
    b = 2 * (B * C + A * B * x0 - sq(A) * y0);
    c = sq(C) + 2 * A * C * x0 - sq(A) * (sq(r) - sq(x0) - sq(y0));
    bnz = false;
  }
  auto d = sq(b) - 4 * a * c; // discriminant
  if (d < 0) {
    return res;
  }

  // checks whether a point is within a segment
  auto within = [x1, y1, x2, y2](long double x, long double y) {
    auto d1 = sqrt(sq(x2 - x1) + sq(y2 - y1)); // distance between end-points
    auto d2 = sqrt(sq(x - x1) + sq(y - y1));   // distance from point to one end
    auto d3 = sqrt(sq(x2 - x) + sq(y2 - y)); // distance from point to other end
    auto delta = d1 - d2 - d3;
    return abs(delta) < eps; // true if delta is less than a small tolerance
  };

  auto fx = [A, B, C](long double x) { return -(A * x + C) / B; };

  auto fy = [A, B, C](long double y) { return -(B * y + C) / A; };

  auto rxy = [segment, &res, within](double x, double y) {
    if (!segment || within(x, y)) {
      res.push_back(std::make_pair(x, y));
    }
  };

  double x, y;
  if (d == 0.0) {
    // line is tangent to circle, so just one intersect at most
    if (bnz) {
      x = -b / (2 * a);
      y = fx(x);
      rxy(x, y);
    } else {
      y = -b / (2 * a);
      x = fy(y);
      rxy(x, y);
    }
  } else {
    // two intersects at most
    d = sqrt(d);
    if (bnz) {
      x = (-b + d) / (2 * a);
      y = fx(x);
      rxy(x, y);
      x = (-b - d) / (2 * a);
      y = fx(x);
      rxy(x, y);
    } else {
      y = (-b + d) / (2 * a);
      x = fy(y);
      rxy(x, y);
      y = (-b - d) / (2 * a);
      x = fy(y);
      rxy(x, y);
    }
  }

  return res;
}
} // namespace pcamespace pp {

struct Point {
  int x, y;
  Point(int x_, int y_): x(x_), y(y_) {}
};

// Given three collinear points p, q, r, the function checks if
// point q lies on line segment 'pr'
bool onSegment(Point p, Point q, Point r) {
  if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) && q.y <= max(p.y, r.y) &&
      q.y >= min(p.y, r.y))
    return true;

  return false;
}

// To find orientation of ordered triplet (p, q, r).
// The function returns following values
// 0 --> p, q and r are collinear
// 1 --> Clockwise
// 2 --> Counterclockwise
int orientation(Point p, Point q, Point r) {
  // See https://www.geeksforgeeks.org/orientation-3-ordered-points/
  // for details of below formula.
  long long val = 1LL * (q.y - p.y) * (r.x - q.x) - 1LL * (q.x - p.x) * (r.y - q.y);

  if (val == 0)
    return 0; // collinear

  return (val > 0) ? 1 : 2; // clock or counterclock wise
}

// The main function that returns true if line segment 'p1q1'
// and 'p2q2' intersect.
bool doIntersect(Point p1, Point q1, Point p2, Point q2) {
  // Find the four orientations needed for general and
  // special cases
  int o1 = orientation(p1, q1, p2);
  int o2 = orientation(p1, q1, q2);
  int o3 = orientation(p2, q2, p1);
  int o4 = orientation(p2, q2, q1);

  // General case
  if (o1 != o2 && o3 != o4)
    return true;

  // Special Cases
  // p1, q1 and p2 are collinear and p2 lies on segment p1q1
  if (o1 == 0 && onSegment(p1, p2, q1))
    return true;

  // p1, q1 and q2 are collinear and q2 lies on segment p1q1
  if (o2 == 0 && onSegment(p1, q2, q1))
    return true;

  // p2, q2 and p1 are collinear and p1 lies on segment p2q2
  if (o3 == 0 && onSegment(p2, p1, q2))
    return true;

  // p2, q2 and q1 are collinear and q1 lies on segment p2q2
  if (o4 == 0 && onSegment(p2, q1, q2))
    return true;

  return false; // Doesn't fall in any of the above cases
}

} // namespace pp

namespace pc {
using Point = std::pair<long double, long double>;
long double eps = 1e-12;

std::ostream &operator<<(std::ostream &os, const Point &p) {
  auto x = p.first;
  if (x == 0.0) {
    x = 0.0;
  }
  auto y = p.second;
  if (y == 0.0) {
    y = 0.0;
  }
  return os << '(' << x << ", " << y << ')';
}

template <typename T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
  auto itr = v.cbegin();
  auto end = v.cend();

  os << '[';
  if (itr != end) {
    os << *itr;
    itr = std::next(itr);
  }
  while (itr != end) {
    os << ", " << *itr;
    itr = std::next(itr);
  }
  return os << ']';
}

long double sq(long double x) { return x * x; }

std::vector<Point> intersects(const Point &p1, const Point &p2, const Point &cp,
                              double r, bool segment) {
  std::vector<Point> res;
  auto x0 = cp.first;
  auto y0 = cp.second;
  auto x1 = p1.first;
  auto y1 = p1.second;
  auto x2 = p2.first;
  auto y2 = p2.second;
  auto A = y2 - y1;
  auto B = x1 - x2;
  auto C = x2 * y1 - x1 * y2;
  auto a = sq(A) + sq(B);
  double b, c;
  bool bnz = true;
  if (abs(B) >= eps) {
    b = 2 * (A * C + A * B * y0 - sq(B) * x0);
    c = sq(C) + 2 * B * C * y0 - sq(B) * (sq(r) - sq(x0) - sq(y0));
  } else {
    b = 2 * (B * C + A * B * x0 - sq(A) * y0);
    c = sq(C) + 2 * A * C * x0 - sq(A) * (sq(r) - sq(x0) - sq(y0));
    bnz = false;
  }
  auto d = sq(b) - 4 * a * c; // discriminant
  if (d < 0) {
    return res;
  }

  // checks whether a point is within a segment
  auto within = [x1, y1, x2, y2](long double x, long double y) {
    auto d1 = sqrt(sq(x2 - x1) + sq(y2 - y1)); // distance between end-points
    auto d2 = sqrt(sq(x - x1) + sq(y - y1));   // distance from point to one end
    auto d3 = sqrt(sq(x2 - x) + sq(y2 - y)); // distance from point to other end
    auto delta = d1 - d2 - d3;
    return abs(delta) < eps; // true if delta is less than a small tolerance
  };

  auto fx = [A, B, C](long double x) { return -(A * x + C) / B; };

  auto fy = [A, B, C](long double y) { return -(B * y + C) / A; };

  auto rxy = [segment, &res, within](double x, double y) {
    if (!segment || within(x, y)) {
      res.push_back(std::make_pair(x, y));
    }
  };

  double x, y;
  if (d == 0.0) {
    // line is tangent to circle, so just one intersect at most
    if (bnz) {
      x = -b / (2 * a);
      y = fx(x);
      rxy(x, y);
    } else {
      y = -b / (2 * a);
      x = fy(y);
      rxy(x, y);
    }
  } else {
    // two intersects at most
    d = sqrt(d);
    if (bnz) {
      x = (-b + d) / (2 * a);
      y = fx(x);
      rxy(x, y);
      x = (-b - d) / (2 * a);
      y = fx(x);
      rxy(x, y);
    } else {
      y = (-b + d) / (2 * a);
      x = fy(y);
      rxy(x, y);
      y = (-b - d) / (2 * a);
      x = fy(y);
      rxy(x, y);
    }
  }

  return res;
}
} // namespace pc