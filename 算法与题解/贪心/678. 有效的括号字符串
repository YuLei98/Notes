给定一个只包含三种字符的字符串：（ ，） 和 *，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：

任何左括号 ( 必须有相应的右括号 )。
任何右括号 ) 必须有相应的左括号 ( 。
左括号 ( 必须在对应的右括号之前 )。
* 可以被视为单个右括号 ) ，或单个左括号 ( ，或一个空字符串。
一个空字符串也被视为有效字符串。
示例 1:

输入: "()"
输出: True
示例 2:

输入: "(*)"
输出: True
示例 3:

输入: "(*))"
输出: True


思路：
使用贪心的思想。

从左到右遍历字符串，遍历过程中，未匹配的左括号数量可能会出现如下变化：

如果遇到左括号，则未匹配的左括号数量加 1；
如果遇到右括号，则需要有一个左括号和右括号匹配，因此未匹配的左括号数量减 1；
如果遇到星号，由于星号可以看成左括号、右括号或空字符串，因此未匹配的左括号数量可能加 11、减 11 或不变。

基于上述结论，可以在遍历过程中维护未匹配的左括号数量可能的最小值和最大值，根据遍历到的字符更新最小值和最大值：

如果遇到左括号，则将最小值和最大值分别加 1；
如果遇到右括号，则将最小值和最大值分别减 1；
如果遇到星号，则将最小值减 1，将最大值加 1。

任何情况下，未匹配的左括号数量必须非负，因此当最大值变成负数时，说明没有左括号可以和右括号匹配，返回 false。
当最小值为 00 时，不应将最小值继续减少，以确保最小值非负。
遍历结束时，所有的左括号都应和右括号匹配，因此只有当最小值为 00 时，字符串 ss 才是有效的括号字符串。


复杂度分析
时间复杂度：O(n)O(n)，其中 nn 是字符串 ss 的长度。需要遍历字符串一次。
空间复杂度：O(1)O(1)。
/*
class Solution {
    public boolean checkValidString(String s) {
        int minCount = 0, maxCount = 0;
        int n = s.length();
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (c == '(') {
                minCount++;
                maxCount++;
            } else if (c == ')') {
                minCount = Math.max(minCount - 1, 0);
                maxCount--;
                if (maxCount < 0) {
                    return false;
                }
            } else {
                minCount = Math.max(minCount - 1, 0);
                maxCount++;
            }
        }
        return minCount == 0;
    }
}
*/

//也可用栈
/*
class Solution {
public:
    bool checkValidString(string s) {
        stack<int> left, star;
        for (int i = 0, n = s.length(); i < n; ++ i){
            if (s[i] == '(') left.push(i);
            else if (s[i] == '*') star.push(i);
            else{
                if (!left.empty()) left.pop();
                else if (!star.empty()) star.pop();
                else
                    return false;
            }
        }
        while (!left.empty() && !star.empty()){
            if (left.top() > star.top()) return false;
            left.pop();
            star.pop();
        }
        return left.empty();
    }
};
*/